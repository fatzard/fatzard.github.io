<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>扩展欧几里得定理</title>
      <link href="/2022/04/07/kuo-zhan-ou-ji-li-de-suan-fa/"/>
      <url>/2022/04/07/kuo-zhan-ou-ji-li-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>现在我们已经知道了，方程ax+by=gcd（a，b） 的一组可行解一定有一组可行解，那么如何求解它喃？</p><p>而这个时候我们有一个方法可以帮助我们求解：</p><p>扩展欧几里得算法（Extended Euclidean algorithm, EXGCD），常用于求ax+by=gcd（a，b） 的一组可行解。</p><p>下面来看一下证明：</p><p>(没加载出来一定要多刷新一下，这渲染太慢了)</p><script type="math/tex; mode=display">设\begin{cases}ax1+by1=gcd(a,b)\\bx2+(a\ mod\ b)y2=gcd(b,a\ mod\ b)\end{cases}\\∵gcd(a,b)=gcd(b,a\ mod\ b);\\∴ax1+by1=gcd(b,a mod b)=bx2+(a\ mod\ b)y2;\\又∵a\ mod\ b=a-[\frac{a}{b}]*b\\\begin{aligned}∴bx2+(a\ mod\ b)y2&=bx2+(a-[\frac{a}{b}]*b)y2\\                             &=bx2+ay2-[\frac{a}{b}]*b*y2\\                             &=ay2+b(x2-[\frac{a}{b}]*y2)\\                             &=ax1+by1\\                           \end{aligned}\\                             由于对应项系数对应相等,所以 \\                             \begin{cases}                             x1=y2\\        y1=x2-[\frac{a}{b}]*y2\\        \end{cases}</script><p>那么将x2，y2 不断代入递归求解直至gcd 为 0为止<br>在这之前有 </p><script type="math/tex; mode=display">gcd*x+0*y=gcd</script><p>，故x=1，y=0，再反过来带回去迭代便可以求出一组可行解</p><p>代码实现：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int ex_gcd(int a,int b,int &amp;x,int &amp;y)&#x2F;&#x2F;扩展欧几里得求ax+by&#x3D;gcd（a，b）；&#123;if(!b)&#123;x&#x3D;1;        y&#x3D;0;return a;&#125;int gcd&#x3D;ex_gcd(b,a%b,y,x);y-&#x3D;a&#x2F;b*x;return gcd;&#125;int main()&#123;    int a,b,x,y;    cin&gt;&gt;a&gt;&gt;b;    int gcd&#x3D;ex_gcd(a,b,x,y);     printf(&quot;%dx+%dy&#x3D;%d\n&quot;,a,b,gcd);    cout&lt;&lt;&quot;x&#x3D;&quot;&lt;&lt;x&lt;&lt;&quot; y&#x3D;&quot;&lt;&lt;y&lt;&lt;endl;&#x2F;&#x2F;方程的特解，可由线性代数相关知识推出通解；    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用“矩阵”巧妙证明斐蜀定理</title>
      <link href="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/"/>
      <url>/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/</url>
      
        <content type="html"><![CDATA[<p>裴蜀定理，又称贝祖定理（Bézout’s lemma）。是一个关于最大公约数的定理。</p><p>其内容是：</p><script type="math/tex; mode=display">设a，b是不全为零的整数，则存在整数 x，y, 使得 ax+by=gcd（a，b）</script><p>那么如何证明这个定理喃？？？</p><p>闲来无事，不小心用矩阵巧妙证明了这个定理O(∩_∩)O哈哈~</p><p>下面请看证明：</p><script type="math/tex; mode=display">证明：将gcd（a，b）=gcd（b，a\ mod\ b）写成矩阵的形式，如下</script><p>这种递推式转换成矩阵的小技巧就是按照矩阵乘法来的，稍微观察便可以发现！！</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/1.png" width="30%"></p><p>将右边这一矩阵继续按照这种方式展开：</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/2.png" width="50%"></p><p>继续化简：</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/3.png" width="45%"></p><p>继续引入矩阵A：</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/4.png" width="45%"></p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/5.png" style="zoom:33%;"></p><p>然后通过矩阵的运算惊奇地发现：</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/6.png" width="25%"></p><p>这是什么？这是什么？这**不就是斐蜀定理吗？</p><script type="math/tex; mode=display">等价于证明了方程ax+by=gcd（a，b）必有特解</script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧几里得算法的证明</title>
      <link href="/2022/04/07/ou-ji-li-de-suan-fa/"/>
      <url>/2022/04/07/ou-ji-li-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>欧几里得算法是用来求两个正整数最大公约数的算法。古希腊数学家欧几里得在其著作《The Elements》中最早描述了这种算法,所以被命名为欧几里得算法</p><p>计算公式如下所示</p><p>(hexo 中 math渲染较慢，稍微等一下，如果还是没出来，就刷新(<em>^▽^</em>))</p><script type="math/tex; mode=display">gcd(a,b) = gcd(b,a\ mod\ b)</script><script type="math/tex; mode=display">下面来证明gcd(a,b) = gcd(b,a\ mod\ b)</script><script type="math/tex; mode=display">证明：设a>b ,令a=kb+c，则c=a\ mod\ b\\       设d=gcd（a，b）\ 则有 a=pd，b=qd\\       故有：pd=kqd+c\ 则c=（p-kq）d\\       \begin{aligned}       ∴gcd（b，a\ mod\ b)&=gcd（b，c）\\                             &=gcd（qd，（p-kq)*d）\\                             &=d * gcd（q，p-kq）\\       \end{aligned}\\（反证法）下面来证明p与p-kq互质：\\       假设q与p-kq不互质，则有q=mt，p-kq=nt\\     ∴ q=mt，p=（km+n）t\\     ∴a=mtd，b=（km+n）td\\     ∴gcd（a，b）=td  与gcd（a，b）=d矛盾\\     ∴假设不成立\\     ∴q与p-kq互质\\     ∴gcd（b，a\ mod\ b）=d=gcd（a，b）</script><p>计算机计算这个相当地简单：</p><pre class="language-c++" data-language="c++"><code class="language-c++">int gcd(int a,int b)&#123;    return b&#x3D;&#x3D;0?a:gcd(b,a%b);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性同余方程的通解及最小正整数解</title>
      <link href="/2022/04/07/xian-xing-tong-yu-fang-cheng-zu-de-tong-jie-ji-zui-xiao-zheng-zheng-shu-jie/"/>
      <url>/2022/04/07/xian-xing-tong-yu-fang-cheng-zu-de-tong-jie-ji-zui-xiao-zheng-zheng-shu-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1、问题引入"><a href="#1、问题引入" class="headerlink" title="1、问题引入"></a>1、问题引入</h3><p>现在来说一个exgcd的应用：求解同余方程</p><p>问题：</p><script type="math/tex; mode=display">求同余方程3x≡1 (mod\ 10)的一个解</script><p>解：可将该同余方程改写成其等价形式，如下：</p><script type="math/tex; mode=display">3x+10y=1</script><p>这个问题的本质是什么？</p><p>就是</p><script type="math/tex; mode=display">求形如ax+by=c方程的一个特解</script><p>那么对于这种形式的方程如何进行求解喃？<br> 法一：暴力从-99999到9999999一个一个的试？</p><p>显然这种本办法是不行的，这个时候就要考虑exgcd</p><p>下面来看操作：</p><script type="math/tex; mode=display">已知exgcd的标准形式ax+by=gcd（a，b），\\那么可以将形如ax+by=c构造成标准形式：\\a*(\frac{x*gcd(a,b)}{c})+b*(\frac{y*gcd(a,b)}{c})=gcd（a，b）\\令X=\frac{x*gcd(a,b)}{c}，Y=\frac{y*gcd(a,b)}{c},则方程变为：aX+bY=gcd(a,b)\\又∵gcd(a,b),c都为已知数\\∴可以通过exgcd求出X后，通过反解得到x(如何求解可参考我的上一篇博客)\\注：由于是整数解，需要考虑是否能gcd是否整除c\\</script><h3 id="2、通解求法"><a href="#2、通解求法" class="headerlink" title="2、通解求法"></a>2、通解求法</h3><p>问题继续深入下去！！！！</p><p>如何</p><script type="math/tex; mode=display">求关于同余方程ax+by=c的一组通解</script><script type="math/tex; mode=display">解：根据前一个问题，我们已经得到了一组特解x_0,y_0\\      现在的问题转化为了根据特解求通解\\      设x_i,y_i与x_j,y_j为方程的两组解\\则有：\begin{cases}ax_i+bx_i=c  ①\\           ax_j+by_j=c  ②\\           \end{cases}           \\联立①②可得a（x_i-x_j）=b（y_j-y_i）\\两边同时除以gcd（a，b）那么得到A（x_i-x_j）=B（y_j-y_i）\\此时gcd（A，B）=1\\那么通过移项可以发现x_i-x_j=\frac{B*(y_j-y_i)}{A}\\由于等号两边都为整数\\故y_j-y_i=k*A，同理x_i-x_j=k*B=k*\frac{b}{gcd(a,b)} \\（说明x_i与x_j之间的差一定为\frac{b}{gcd(a,b)}的倍数）\\所以通解为：\begin{cases}x=x_0+k*\frac{b}{gcd(a,b)}\\                      y=y_0-k*\frac{a}{gcd(a,b)}\\                      \end{cases}\\            有了通解便可以推出x和y的最小正整数解\\</script><h3 id="3、例题："><a href="#3、例题：" class="headerlink" title="3、例题："></a>3、例题：</h3><p>题目来自（POJ-1061）：</p><p>题干：</p><p>两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。<br>我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。</p><p>标程：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;#define int long longint ex_gcd(int a, int b, int &amp;x, int &amp;y)&#123;    if (!b)    &#123;        x &#x3D; 1;        y &#x3D; 0;        return a;    &#125;    int gcd &#x3D; ex_gcd(b, a % b, y, x);    y -&#x3D; a &#x2F; b * x;    return gcd;&#125;signed main()&#123;    int x, y, m, n, l;    cin &gt;&gt; x &gt;&gt; y &gt;&gt; m &gt;&gt; n &gt;&gt; l;    int a &#x3D; -(m - n), b &#x3D; l;    int X0, Y0;    int gcd &#x3D; ex_gcd(a, b, X0, Y0);    if ((x - y) % gcd)        cout &lt;&lt; &quot;Impossible&quot; &lt;&lt; endl;    else    &#123;        X0 &#x3D; X0 * (x - y) &#x2F; gcd;        int s &#x3D; abs(b &#x2F; gcd);        cout &lt;&lt; (X0 % s + s) % s &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP(2)-Spring实现AOP</title>
      <link href="/2022/04/06/spring-aop-2/"/>
      <url>/2022/04/06/spring-aop-2/</url>
      
        <content type="html"><![CDATA[<h3 id="利用Spring实现AOP"><a href="#利用Spring实现AOP" class="headerlink" title="利用Spring实现AOP"></a>利用Spring实现AOP</h3><p>首先写一个UserService接口：</p><pre class="language-java" data-language="java"><code class="language-java">public interface UserService &#123;    public void add();    public void delete();    public void modify();    public void query();&#125;</code></pre><p>再写一个实现类：</p><pre class="language-java" data-language="java"><code class="language-java">public class UserServiceImpl implements UserService&#123;    @Override    public void add() &#123;        System.out.println(&quot;增加了数据&quot;);    &#125;    @Override    public void delete() &#123;        System.out.println(&quot;删除了数据&quot;);    &#125;    @Override    public void modify() &#123;        System.out.println(&quot;修改了数据&quot;);    &#125;    @Override    public void query() &#123;        System.out.println(&quot;查询了数据&quot;);    &#125;&#125;</code></pre><p>然后在XML文件注册bean：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pro.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>好！</p><p>现在我们假设我们的工程就如上所示，现在需要你增加一个日志功能（就是在执行该方法前输出执行了什么方法）</p><p>那么Spring是如何实现的喃？</p><h4 id="1、导入AOP依赖包"><a href="#1、导入AOP依赖包" class="headerlink" title="1、导入AOP依赖包"></a>1、导入AOP依赖包</h4><p>在XML文件中加入：</p><pre class="language-xml" data-language="xml"><code class="language-xml">xmlns:aop="http://www.springframework.org/schema/aop"http://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsd"></code></pre><p>完整的xml文件头部：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/aop       http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="2、利用Spring-API接口实现："><a href="#2、利用Spring-API接口实现：" class="headerlink" title="2、利用Spring-API接口实现："></a>2、利用Spring-API接口实现：</h3><h4 id="2-1、前置方法："><a href="#2-1、前置方法：" class="headerlink" title="2.1、前置方法："></a>2.1、前置方法：</h4><pre class="language-java" data-language="java"><code class="language-java">import org.springframework.aop.MethodBeforeAdvice;import java.lang.reflect.Method;public class BeforeLog implements MethodBeforeAdvice &#123;    &#x2F;&#x2F;method 要执行的目标对象的方法    &#x2F;&#x2F;args 参数    &#x2F;&#x2F;target 目标对象    @Override    public void before(Method method, Object[] args, Object target) throws Throwable &#123;        System.out.println(target.getClass().getName()+&quot;的&quot;+method.getName()+&quot;被执行了&quot;);    &#125;&#125;</code></pre><h4 id="2-2、后置方法："><a href="#2-2、后置方法：" class="headerlink" title="2.2、后置方法："></a>2.2、后置方法：</h4><pre class="language-java" data-language="java"><code class="language-java">import org.springframework.aop.AfterReturningAdvice;import java.lang.reflect.Method;public class AfterLog implements AfterReturningAdvice &#123;    @Override    public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123;        System.out.println(&quot;执行了&quot;+method.getName()+&quot; 返回了&quot;+returnValue);    &#125;&#125;</code></pre><h4 id="2-3、在bean注册："><a href="#2-3、在bean注册：" class="headerlink" title="2.3、在bean注册："></a>2.3、在bean注册：</h4><pre class="language-xml" data-language="xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.log.BeforeLog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.log.AfterLog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    方法一：使用原生spring api接口--></span><span class="token comment">&lt;!--    配置aop--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        首先需要一个切入点 expression :表达式 execution 要执行的位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    执行环绕增加--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><p>现在万事大吉，进行测试：</p><pre class="language-java" data-language="java"><code class="language-java">@Test   public void test()&#123;       ApplicationContext context &#x3D; new ClassPathXmlApplicationConetext(&quot;applicationContext.xml&quot;);       userService userService &#x3D; context.getBean(&quot;userService&quot;);       userService.add();   &#125;</code></pre><h3 id="3、利用自定义类实现："><a href="#3、利用自定义类实现：" class="headerlink" title="3、利用自定义类实现："></a>3、利用自定义类实现：</h3><p>先整一个自定义切入点：</p><pre class="language-java" data-language="java"><code class="language-java">public class DiyPoint &#123;    public void before()    &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;    public void after()&#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;&#125;</code></pre><p>同样地，再配置XML文件即可：</p><pre class="language-xml" data-language="xml"><code class="language-xml">    第二种方式 ：自定义类    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Diy.DiyPoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        自定义切面  ref为要引用的类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--            引入点--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--            通知--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h3 id="4、利用注解实现："><a href="#4、利用注解实现：" class="headerlink" title="4、利用注解实现："></a>4、利用注解实现：</h3><p>利用注解首先需要开启注解支持：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    利用注解的方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PointcutAnnotation<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Diy.PointcutAnnotation<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>接下来在com.Diy.PointcutAnnotation路径写我们的PointCutAnnotation类：</p><pre class="language-java" data-language="java"><code class="language-java">import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;@Aspect&#x2F;&#x2F;标注这个类是一个切面public class PointcutAnnotation &#123;    &#x2F;&#x2F;传入的参数代表切入的点    @Before(&quot;execution(* com.kuang.pro.UserServiceImpl.*(..))&quot;)    public void before()    &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;    @After(&quot;execution(* com.kuang.pro.UserServiceImpl.*(..))&quot;)    public void after()    &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;    @Around(&quot;execution(* com.kuang.pro.UserServiceImpl.*(..))&quot;)    public  void around(ProceedingJoinPoint joinPoint) throws Throwable &#123;        System.out.println(&quot;环绕前&quot;);        joinPoint.proceed();        System.out.println(&quot;环绕后&quot;);    &#125;&#125;</code></pre><p>同样测试可以通过！！！O(∩_∩)O哈哈~</p><p><img src="/2022/04/06/spring-aop-2/1.jpg" alt="测试"></p><p>美哉，下面开学SpringMVC！</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP(1)-JDK动态管理</title>
      <link href="/2022/04/05/spring-aop-1/"/>
      <url>/2022/04/05/spring-aop-1/</url>
      
        <content type="html"><![CDATA[<h3 id="1、什么是AOP？"><a href="#1、什么是AOP？" class="headerlink" title="1、什么是AOP？"></a>1、什么是AOP？</h3><p>​      用来自百科的话来说：</p><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/面向切面编程/6016335">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/预编译/3191547">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/函数式编程/4035031">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/耦合度/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><p>​            ！！！！！</p><p>​    换言之，什么意思喃？用简单的话来说，就是在不破坏原有代码的情况下，通过“代理”的这种模式来切入，从而达到实现在不改变原有代码情况下进行功能的增加、删减！</p><p>​    看下面这张图：</p><p><img src="/2022/04/05/spring-aop-1/1.jpg" alt="AOP"></p><p>如果一个开发是按照A-&gt;B-&gt;C-&gt;D这样的流程来的，现在你想添加一些功能，你会发现，如果要改变或者添加功能，代码量的改变将会非常之大！！！因为有可能一个类继承了一堆类，你如果改一个类，如果没处理好，那就会“寄”，而且改代码是非常痛苦的！！！！（打ACM调一个计算几何都非常痛苦，别说这一堆Java代码），所以出现了“代理”这种思想，这种思想采用代理的方式，将对象封装在一个代理对象中，通过代理的方式进行功能的增删！</p><h3 id="2、JDK动态代理"><a href="#2、JDK动态代理" class="headerlink" title="2、JDK动态代理"></a>2、JDK动态代理</h3><p><strong>JDK的动态代理需要了解两个类</strong></p><p>核心 : InvocationHandler   和   Proxy  ， 网上看JDK帮助文档吧O(∩_∩)O</p><p>模版：</p><pre class="language-java" data-language="java"><code class="language-java">package com.demo3.pro;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class ProxyInvocationHandler implements InvocationHandler &#123;    &#x2F;&#x2F;被代理的接口    private Object target;    public void setTarget(Object target) &#123;        this.target &#x3D; target;    &#125;    &#x2F;&#x2F;生成得到的代理类    public Object getProxy()    &#123;        return Proxy.newProxyInstance(this.getClass().getClassLoader(),                target.getClass().getInterfaces(),this);    &#125;    &#x2F;&#x2F;处理生成实例并返回代理结果    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;        Object result&#x3D;method.invoke(target,args);        return result;    &#125;&#125;</code></pre><p>在测试中调用即可：</p><pre class="language-java" data-language="java"><code class="language-java">@Testpublic  void test()&#123;    &#x2F;&#x2F;真实角色    UserSeveImpl userSeveimpl&#x3D;new UserSeveImpl();    &#x2F;&#x2F;代理角色    ProxyInvocationHandler proxyInvocationHandler&#x3D;new ProxyInvocationHandler();    proxyInvocationHandler.setTarget(userSeveimpl);&#x2F;&#x2F;设置要代理的对象    &#x2F;&#x2F;动态生成代理类    UserSeve userSeve &#x3D;(UserSeve) proxyInvocationHandler.getProxy();    userSeve.add();&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中Bean的作用域&amp;XML的自动装配(注解)</title>
      <link href="/2022/04/05/spring-zhong-bean-de-zuo-yong-yu-xml-zi-dong-zhuang-pei/"/>
      <url>/2022/04/05/spring-zhong-bean-de-zuo-yong-yu-xml-zi-dong-zhuang-pei/</url>
      
        <content type="html"><![CDATA[<h3 id="1、bean的作用域"><a href="#1、bean的作用域" class="headerlink" title="1、bean的作用域"></a>1、bean的作用域</h3><p>​    在XML文件中，bean对象后面加一个scope便可以知道这个bean的作用域，但是在Spring中默认为单例</p><h4 id="1-1、当scope-singleton时为单例"><a href="#1-1、当scope-singleton时为单例" class="headerlink" title="1.1、当scope=singleton时为单例"></a>1.1、当scope=singleton时为单例</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wang.pojo.MyBean<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="1-2、当scope-prototype时为多例"><a href="#1-2、当scope-prototype时为多例" class="headerlink" title="1.2、当scope=prototype时为多例"></a>1.2、当scope=prototype时为多例</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wang.pojo.MyBean<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>除此之外还有，<code>request</code>和<code>session</code>作用域。(<em>^▽^</em>)（还没学）</p><h4 id="1-3、bean的一个周期："><a href="#1-3、bean的一个周期：" class="headerlink" title="1.3、bean的一个周期："></a>1.3、bean的一个周期：</h4><p>底层的bean是如何执行？</p><ul><li>执行无参数的构造</li><li>执行set方法设置属性值</li><li>在初始化方法前添加前置处理器</li><li>执行初始化方法</li><li>在初始化方法后添加后置处理器</li><li>获取创建Bean的实例对象</li><li>执行销毁方法(context.close执行即完成销毁)</li></ul><p>注：这也是为什么要写set和get方法</p><p>O(∩_∩)O哈哈~不过IDEA快捷键（alt+insert一键生成set和get方法，我一次都没自己手写过）</p><h3 id="2、xml自动装配"><a href="#2、xml自动装配" class="headerlink" title="2、xml自动装配"></a>2、xml自动装配</h3><p>写一个测试的person类：</p><pre class="language-java" data-language="java"><code class="language-java">public class Person &#123;    private   Cat cat;    private   Dog dog;    private String name;    public Cat getCat() &#123;        return cat;    &#125;    public void setCat(Cat cat) &#123;        this.cat &#x3D; cat;    &#125;    public Dog getDog() &#123;        return dog;    &#125;    public void setDog(Dog dog) &#123;        this.dog &#x3D; dog;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;    @Override    public String toString() &#123;        return &quot;Person&#123;&quot; +                &quot;cat&#x3D;&quot; + cat +                &quot;, dog&#x3D;&quot; + dog +                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;</code></pre><h4 id="2-1、byName装配"><a href="#2-1、byName装配" class="headerlink" title="2.1、byName装配"></a>2.1、byName装配</h4><p>Bean的id值必须与类中变量名一致</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>自动装配<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Person<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kimihua<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>就是在bean中加一个autowire</p><h4 id="2-2、byType装配"><a href="#2-2、byType装配" class="headerlink" title="2.2、byType装配"></a>2.2、byType装配</h4><p>注：不能有相同类型的Bean</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Person<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kimihua<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="2-3、利用注解自动装配"><a href="#2-3、利用注解自动装配" class="headerlink" title="2.3、利用注解自动装配"></a>2.3、利用注解自动装配</h4><p>前提：在spring4之后，想要使用注解形式，必须得要引入aop的包，而且在配置文件当中，还得要引入一个context约束。</p><p>完整配置文件：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>好了，可以开始注解操作了||ヽ(<em>￣▽￣</em>)ノミ|Ю（事真多）</p><p>首先在xml文件中打开注解支持，如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>这个意思就是：扫描该目录下的所有包，这样加了注解之后就可以被发现。</p><p>完整的xml的文件呢：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>然后在测试person类中加上<code>@Autowired</code></p><pre class="language-java" data-language="java"><code class="language-java">public class Person &#123;    @Autowired    private   Cat cat;    @Autowired    private   Dog dog;    private String name;    public Cat getCat() &#123;        return cat;    &#125;&#x2F;&#x2F;    public void setCat(Cat cat) &#123;&#x2F;&#x2F;        this.cat &#x3D; cat;&#x2F;&#x2F;    &#125;    public Dog getDog() &#123;        return dog;    &#125;&#x2F;&#x2F;    public void setDog(Dog dog) &#123;&#x2F;&#x2F;        this.dog &#x3D; dog;&#x2F;&#x2F;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;    @Override    public String toString() &#123;        return &quot;Person&#123;&quot; +                &quot;cat&#x3D;&quot; + cat +                &quot;, dog&#x3D;&quot; + dog +                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;</code></pre><p>小贴士：</p><p>利用注解的方式写，可以不用set方法。</p><p>^_(<em>^▽^</em>)好像挺方便的！！！</p><h4 id="2-4、其他注解"><a href="#2-4、其他注解" class="headerlink" title="2.4、其他注解"></a>2.4、其他注解</h4><h4 id="2-4-1、-Qualifier"><a href="#2-4-1、-Qualifier" class="headerlink" title="2.4.1、@Qualifier"></a>2.4.1、<code>@Qualifier</code></h4><p>按名称自动装配(byName){不能单独使用，需跟<a href="https://github.com/Autowired">@Autowired</a>()搭配使用}</p><p><a href="https://github.com/Autowired">@Autowired</a>()匹配多个类型的值时可使用<a href="https://github.com/Qualifier">@Qualifier</a>()取出其中一个</p><pre class="language-java" data-language="java"><code class="language-java">@Autowired@Qualifier(value &#x3D; &quot;str&quot;)private String str;</code></pre><h4 id="2-4-2、-Resource"><a href="#2-4-2、-Resource" class="headerlink" title="2.4.2、@Resource"></a>2.4.2、<code>@Resource</code></h4><p>实现方式：先进行byName查找 失败；再进行byType查找</p><pre class="language-java" data-language="java"><code class="language-java">public class User &#123;    &#x2F;&#x2F;如果允许对象为null，设置required &#x3D; false,默认为true    @Resource(name &#x3D; &quot;cat2&quot;)    private Cat cat;    @Resource    private Dog dog;    private String name;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring对象创建与依赖注入</title>
      <link href="/2022/04/05/spring-dui-xiang-zhu-ru/"/>
      <url>/2022/04/05/spring-dui-xiang-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>首先创建一个Student实体类，它具有以下属性：</p><pre class="language-java" data-language="java"><code class="language-java">private  String name;private  Address address;private  String[] book;private  List&lt;String&gt; hobbys;private  Map&lt;String,String&gt;card;private  Set&lt;String&gt;games;private  String money;private  Properties info;</code></pre><p>下面利用SpringIOC实现：</p><h4 id="1-1、在bean中创建对象："><a href="#1-1、在bean中创建对象：" class="headerlink" title="1.1、在bean中创建对象："></a>1.1、在bean中创建对象：</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 各种属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="2、对于对象属性的依赖注入："><a href="#2、对于对象属性的依赖注入：" class="headerlink" title="2、对于对象属性的依赖注入："></a>2、对于对象属性的依赖注入：</h4><h5 id="2-1、普通值注入："><a href="#2-1、普通值注入：" class="headerlink" title="2.1、普通值注入："></a>2.1、普通值注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第一种普通值注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fatzard<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="2-2、利用bean注入："><a href="#2-2、利用bean注入：" class="headerlink" title="2.2、利用bean注入："></a>2.2、利用bean注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第二种bean注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adress<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="2-3、数组注入："><a href="#2-3、数组注入：" class="headerlink" title="2.3、数组注入："></a>2.3、数组注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--数组注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>追风筝的人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>那不勒斯的灯火<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-4、List注入："><a href="#2-4、List注入：" class="headerlink" title="2.4、List注入："></a>2.4、List注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbys<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>听歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>敲代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-5、map注入："><a href="#2-5、map注入：" class="headerlink" title="2.5、map注入："></a>2.5、map注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--map--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>122121212<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-6、set注入："><a href="#2-6、set注入：" class="headerlink" title="2.6、set注入："></a>2.6、set注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--set--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>GTA5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CSGO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-7、注入空值："><a href="#2-7、注入空值：" class="headerlink" title="2.7、注入空值："></a>2.7、注入空值：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注入空值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-8、Properties的注入："><a href="#2-8、Properties的注入：" class="headerlink" title="2.8、Properties的注入："></a>2.8、Properties的注入：</h5><p>Properties可以存放很多东西，如下所示：<br><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--propertoes--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>202000001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></p><h4 id="3、利用p或c命名空间注入"><a href="#3、利用p或c命名空间注入" class="headerlink" title="3、利用p或c命名空间注入"></a>3、利用p或c命名空间注入</h4><p>在bean配置头部加上：</p><pre class="language-xml" data-language="xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"xmlns:c="http://www.springframework.org/schema/c"</code></pre><p>完整头部：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h4><p>使用ApplicationContext获取对应的bean</p><pre class="language-xml" data-language="xml"><code class="language-xml">ApplicationContext context =new ClassPathXmlApplicationContext("beans.xml");Student student=(Student)context.getBean("student");System.out.println(student.toString());</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC底层原理简析</title>
      <link href="/2022/04/04/spring-ioc/"/>
      <url>/2022/04/04/spring-ioc/</url>
      
        <content type="html"><![CDATA[<h3 id="1、什么是IOC？"><a href="#1、什么是IOC？" class="headerlink" title="1、什么是IOC？"></a>1、什么是IOC？</h3><h4 id="1-1、控制反转"><a href="#1-1、控制反转" class="headerlink" title="1.1、控制反转"></a>1.1、控制反转</h4><p> 控制反转的英文即Inversion of Control（IOC），换言之：就是一个bean容器，专业的说法叫做控制反转。它的作用就是在spring启动时会去将一个个bean放到这个容器当中。bean可以通过配置文件定义也可以通过注解定义。</p><h4 id="1-2、用图表示："><a href="#1-2、用图表示：" class="headerlink" title="1.2、用图表示："></a>1.2、用图表示：</h4><p><img src="/2022/04/04/spring-ioc/1.jpg" alt="IOC"></p><p>这张图感觉最生动地体现了IOC。</p><h3 id="2、Spring-IOC底层"><a href="#2、Spring-IOC底层" class="headerlink" title="2、Spring IOC底层"></a>2、Spring IOC底层</h3><h4 id="2-1、没有采用IOC之前："><a href="#2-1、没有采用IOC之前：" class="headerlink" title="2.1、没有采用IOC之前："></a>2.1、没有采用IOC之前：</h4><p>原始采用一个类方法中new另一个类的实例来进行调用违反了迪米特法则。当B类改变所有依赖它的类都需要改变！</p><p><img src="/2022/04/04/spring-ioc/2.jpg" alt="before"></p><h4 id="2-2、采用IOC"><a href="#2-2、采用IOC" class="headerlink" title="2.2、采用IOC"></a>2.2、采用IOC</h4><p>利用IOC这种工厂的思想</p><h4 id><a href="#" class="headerlink" title></a><img src="/2022/04/04/spring-ioc/3.jpg" alt="after"></h4><h4 id="2-3、IOC解耦"><a href="#2-3、IOC解耦" class="headerlink" title="2.3、IOC解耦"></a>2.3、IOC解耦</h4><p>采用工厂这种模式，再配置XML，从XML中取出配置好的bean对象。</p><p>第一步配置XML文件，配置创建的对象：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysqlImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.UserDaoMysqlImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>第二步在加载配置文件时候就进行对象的创建（常用）</p><pre class="language-java" data-language="java"><code class="language-java">ApplicationContext context&#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code></pre><p>而这个context就类似于工厂，接下来就可以取出对象就行：</p><pre class="language-java" data-language="java"><code class="language-java">UserService userService&#x3D;(UserService) context.getBean(&quot;mysqlImpl&quot;);</code></pre><p>从而可以调用对象的方法：</p><pre class="language-java" data-language="java"><code class="language-java">userService.getUser();</code></pre><p>简而言之，Spring采用了这种工厂模式注入对象，而这也是Spring的核心之一！！！！</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个基于Spring的程序</title>
      <link href="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/"/>
      <url>/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是Spring？"><a href="#1、什么是Spring？" class="headerlink" title="1、什么是Spring？"></a>1、什么是Spring？</h2><p>Spring是轻量级开源的javaEE框架,其核心是AOP和IOC</p><h4 id="1-1、Spring的特点："><a href="#1-1、Spring的特点：" class="headerlink" title="1.1、Spring的特点："></a>1.1、Spring的特点：</h4><p>1.方便解耦，简化开发</p><p>2.AOP编程支持</p><p>3.方便程序测试</p><p>4.方便和其他框架进行整合    </p><p>5.方便事务操作</p><p>6.降低API开发难度</p><h4 id="1-2、Spring下载："><a href="#1-2、Spring下载：" class="headerlink" title="1.2、Spring下载："></a>1.2、Spring下载：</h4><p>进入网址：[<a href="http://repo.spring.io">http://repo.spring.io</a>]</p><p>详细的Spring下载可参考这篇博客<a href="https://blog.csdn.net/frankarmstrong/article/details/69808813">https://blog.csdn.net/frankarmstrong/article/details/69808813</a></p><h2 id="2、Spring-项目中pom-xml文件配置"><a href="#2、Spring-项目中pom-xml文件配置" class="headerlink" title="2、Spring 项目中pom.xml文件配置"></a>2、Spring 项目中pom.xml文件配置</h2><h4 id="2-1、导入依赖包："><a href="#2-1、导入依赖包：" class="headerlink" title="2.1、导入依赖包："></a>2.1、导入依赖包：</h4><p>Spring常用的的依赖包可以通过导入spring-webmvc包自动导入</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/1.png" alt></p><p>在xml文件中添加如下配置</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>导入依赖包，通过maven即可自动加载。</p><p>除此之外，还可以导入其他常用包</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/2.png" alt></p><p>这些包在后面的开发中会用到，其相关配置文件如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="3、利用Spring运行一个简单的程序"><a href="#3、利用Spring运行一个简单的程序" class="headerlink" title="3、利用Spring运行一个简单的程序"></a>3、利用Spring运行一个简单的程序</h3><p>打开IDEA编译器，构建如下的目录</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/3.png" alt="image-20220404185532186"></p><p>首先写一个实体<code>hello</code>类：</p><pre class="language-java" data-language="java"><code class="language-java">public class Hello &#123;    private  String str;    public String getStr() &#123;        return str;    &#125;    public void setStr(String str) &#123;        this.str &#x3D; str;    &#125;    @Override    public String toString() &#123;        return &quot;Hello&#123;&quot; +                &quot;str&#x3D;&#39;&quot; + str + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;</code></pre><p>其中<code>./resources/bean.xml</code>为Spring的容器配置文件，那么接下来向Spring容器中注入对象：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>在Spring中每个对象也被叫做bean，每个bean通过Spring容器赋值，比如：<code>&lt;property name=&quot;str&quot; value=&quot;Spring&quot;&gt;&lt;/property&gt;</code></p><p>如果对象注入成功，那么在hello类的左侧出现个Spring的标志</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/4.png" alt></p><p>看来我们注册成功，那么接下来写一次test类进行测试：</p><pre class="language-java" data-language="java"><code class="language-java">public class mytest &#123;    public static  void main(String[] args)&#123;        ApplicationContext context&#x3D;new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);        Hello hello&#x3D;(Hello) context.getBean(&quot;hello&quot;);        System.out.println(hello.toString());    &#125;&#125;</code></pre><p>其中<code>ApplicationContext context=new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code>是拿去Spring容器中对象的前提操作，因此在取得上下文后，再通过<code>context.getBean</code>方法传入<code>id</code>获得的对象，这样我们就拿到了对象。</p><p>运行一下：</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/5.png" alt></p><p>很高兴，运行成功！！！！</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码格式测试</title>
      <link href="/2022/04/04/dai-ma-ce-shi/"/>
      <url>/2022/04/04/dai-ma-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>首先测试java代码：</p><pre class="language-java" data-language="java"><code class="language-java">public class Main&#123;    @Test    public void test()    &#123;        System.out.println(&quot;Java&quot;)    &#125;&#125;</code></pre><p>然后测试C++代码：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main()&#123;    cout&lt;&lt;&quot;C++&quot;&lt;&lt;endl;    return 0;&#125;</code></pre><p>最后是python代码：</p><pre class="language-py" data-language="py"><code class="language-py">print(&quot;python&quot;)</code></pre><p>完成</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2022/04/03/hello-world/"/>
      <url>/2022/04/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hello, my friends!</p><p>这是我的博客，我将在这分享我的算法笔记和Spring的学习之路！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
