<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>斯特林数</title>
      <link href="/2022/08/27/si-te-lin-shu/"/>
      <url>/2022/08/27/si-te-lin-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="斯特林数（Stirling-Number）"><a href="#斯特林数（Stirling-Number）" class="headerlink" title="斯特林数（Stirling Number）"></a>斯特林数（Stirling Number）</h2><p>斯特林数主要处理的是把$N$个不同的元素分成$k$个集合或环的个数问题</p><h3 id="1-第二类斯特林数"><a href="#1-第二类斯特林数" class="headerlink" title="1.第二类斯特林数"></a>1.第二类斯特林数</h3><p>表示将$n$个元素划分成$m$个集合，每个集合非空的方案数，读作$n$<strong>子集</strong>$m$，记作$\begin{Bmatrix}n\m \end{Bmatrix}$,又称为<strong>斯特林子集数</strong></p><h4 id="1-1、组合意义推导"><a href="#1-1、组合意义推导" class="headerlink" title="1.1、组合意义推导"></a>1.1、组合意义推导</h4><p>新来一个元素$n$，对于该元素我们有两种方案：</p><h1 id="1：元素-n-单独做一个集合，故此时的方案为：-begin-Bmatrix-n-1-k-1-end-Bmatrix"><a href="#1：元素-n-单独做一个集合，故此时的方案为：-begin-Bmatrix-n-1-k-1-end-Bmatrix" class="headerlink" title="1：元素$n$单独做一个集合，故此时的方案为：$\begin{Bmatrix}n-1\k-1\end{Bmatrix}$"></a>1：元素$n$单独做一个集合，故此时的方案为：$\begin{Bmatrix}n-1\k-1\end{Bmatrix}$</h1><h1 id="2：元素-n-放入一个现有的非空集合，那么我们需要选择一个非空集合，故此时的方案为-C-k-1-begin-Bmatrix-n-1-k-end-Bmatrix"><a href="#2：元素-n-放入一个现有的非空集合，那么我们需要选择一个非空集合，故此时的方案为-C-k-1-begin-Bmatrix-n-1-k-end-Bmatrix" class="headerlink" title="2：元素$n$放入一个现有的非空集合，那么我们需要选择一个非空集合，故此时的方案为:$C_k^1\begin{Bmatrix}n-1\k\end{Bmatrix}$"></a>2：元素$n$放入一个现有的非空集合，那么我们需要选择一个非空集合，故此时的方案为:$C_k^1\begin{Bmatrix}n-1\k\end{Bmatrix}$</h1><p>所以通过加法原理可以得到：$\begin{Bmatrix}n\m \end{Bmatrix}=\begin{Bmatrix}n-1\k-1\end{Bmatrix}+C_k^1\begin{Bmatrix}n-1\k\end{Bmatrix}$</p><h4 id="1-2、容斥原理推导"><a href="#1-2、容斥原理推导" class="headerlink" title="1.2、容斥原理推导"></a>1.2、容斥原理推导</h4><script type="math/tex; mode=display">设全集S=\{乱放\}\\子集A_i=\{第i个盒子是空的\}\\\begin{aligned}\therefore|S-U_{k=0}^{m}A_i|&=\sum_{k=0}^{m}(-1)^k[子问题:哪几个盒子是空的]\\&=\frac{1}{m!}\sum_{k=0}^{m}(-1)^kC_m^k(m-k)^n\\&=\sum_{k=0}^m\frac{(-1)^k}{k!}\frac{(m-k)^n}{(m-k)!}\end{aligned}\\\therefore 通项公式\begin{Bmatrix}n\\m\end{Bmatrix}=\sum_{k=0}^m\frac{(-1)^k}{k!}\frac{(m-k)^n}{(m-k)!}</script><p>通过观察我们可以发现通项公式其实是一个卷积的形式，因此我们可以利用FFT在$O(nlogn)$的时间内求对于$n$不变，任意$m\in[0,n]$的$\begin{Bmatrix}n\m\end{Bmatrix}$</p><h4 id="1-3、生成函数推导"><a href="#1-3、生成函数推导" class="headerlink" title="1.3、生成函数推导"></a>1.3、生成函数推导</h4><script type="math/tex; mode=display">由于分的每个集合是没有标号的，故可以写出每个集合的指数生成函数A(x)=\sum_{i=1}^{+\infty}\frac{x^i}{i!}\\\therefore \begin{Bmatrix}n\\m\end{Bmatrix}=\frac{[x^n]A^m(x)}{m!}</script><p>那么可以利用多项式快速幂求出</p><p>通过观察我们还可以发现，在$m$不变时，利用多项式快速幂求出$A^m(x)$后，对于任意$n&gt;m$都可以通过$A^m(x)$在$O(1)$时间内知道对应的$[x^n]$</p><h4 id="1-4、第二类斯特林数的重要性质"><a href="#1-4、第二类斯特林数的重要性质" class="headerlink" title="1.4、第二类斯特林数的重要性质"></a>1.4、第二类斯特林数的重要性质</h4><script type="math/tex; mode=display">n^k=\sum_{i=0}^{k}i!C_n^i\begin{Bmatrix}k\\i\end{Bmatrix}</script><h5 id="1-4-1、理解"><a href="#1-4-1、理解" class="headerlink" title="1.4.1、理解"></a>1.4.1、理解</h5><p>等式左边考虑$k$个球可以放置在$n$个盒子里</p><p>等式右边考虑为枚举非空盒子的数量$i$,那么把$k$个球放到$i$个盒子</p><h5 id="1-4-2、运用"><a href="#1-4-2、运用" class="headerlink" title="1.4.2、运用"></a>1.4.2、运用</h5><p>可以将一个高次方数转化为第二类斯特林数</p><h4 id="1-5、第二类斯特林数其他性质"><a href="#1-5、第二类斯特林数其他性质" class="headerlink" title="1.5、第二类斯特林数其他性质"></a>1.5、第二类斯特林数其他性质</h4><script type="math/tex; mode=display">\begin{aligned}&\begin{Bmatrix}0\\0\end{Bmatrix}=1\\&\begin{Bmatrix}n\\0\end{Bmatrix}=0,n>0\\&\begin{Bmatrix}n\\n\end{Bmatrix}=1\\&\begin{Bmatrix}n\\2\end{Bmatrix}=\begin{Bmatrix}n-1\\1\end{Bmatrix}+2\times \begin{Bmatrix}n-1\\2\end{Bmatrix}=1+2^{n-1}\\&\begin{Bmatrix}n\\n-1\end{Bmatrix}=C_n^2\\&\begin{Bmatrix}n\\n-2\end{Bmatrix}=C_n^3+3C_n^4\\&\begin{Bmatrix}n\\3\end{Bmatrix}=\frac{1}{2}(3^{n-1}+1)-2^{n-1}\\&\begin{Bmatrix}n\\n-3\end{Bmatrix}=C_n^4+10C_n^5+15C_n^6\end{aligned}</script><h3 id="2、第一类斯特林数"><a href="#2、第一类斯特林数" class="headerlink" title="2、第一类斯特林数"></a>2、第一类斯特林数</h3><p>表示 $n$ 个数形成 $m$ 个环的方案数，读作$n$ <strong>轮换</strong>$m$ ,记作$\begin{bmatrix}n\m\end{bmatrix}$，又称为斯特林轮换数</p><h4 id="2-1、组合意义推导"><a href="#2-1、组合意义推导" class="headerlink" title="2.1、组合意义推导"></a>2.1、组合意义推导</h4><p>新来一个元素$n$，对于该元素我们有两种方案：</p><h1 id="1：元素-n-单独做一个环，故此时的方案为：-begin-bmatrix-n-1-k-1-end-bmatrix"><a href="#1：元素-n-单独做一个环，故此时的方案为：-begin-bmatrix-n-1-k-1-end-bmatrix" class="headerlink" title="1：元素$n$单独做一个环，故此时的方案为：$\begin{bmatrix}n-1\k-1\end{bmatrix}$"></a>1：元素$n$单独做一个环，故此时的方案为：$\begin{bmatrix}n-1\k-1\end{bmatrix}$</h1><h1 id="2：元素-n-放入一个现有的环，那么我们需要选择一个数，并把这个新数插到其前面，故此时的方案为-C-n-1-1-begin-bmatrix-n-1-k-end-bmatrix"><a href="#2：元素-n-放入一个现有的环，那么我们需要选择一个数，并把这个新数插到其前面，故此时的方案为-C-n-1-1-begin-bmatrix-n-1-k-end-bmatrix" class="headerlink" title="2：元素$n$放入一个现有的环，那么我们需要选择一个数，并把这个新数插到其前面，故此时的方案为:$C_{n-1}^1\begin{bmatrix}n-1\k\end{bmatrix}$"></a>2：元素$n$放入一个现有的环，那么我们需要选择一个数，并把这个新数插到其前面，故此时的方案为:$C_{n-1}^1\begin{bmatrix}n-1\k\end{bmatrix}$</h1><p>所以通过加法原理可以得到：$\begin{bmatrix}n\m \end{bmatrix}=\begin{bmatrix}n-1\k-1\end{bmatrix}+C_{n-1}^1\begin{bmatrix}n-1\k\end{bmatrix}$</p><h4 id="2-2、生成函数推导"><a href="#2-2、生成函数推导" class="headerlink" title="2.2、生成函数推导"></a>2.2、生成函数推导</h4><script type="math/tex; mode=display">同样地我们考虑单个环上的生成函数，对于长度为i的环而言，其方案数为(i-1)!\\\therefore 我们可以写出单个环的指数生成函数:A(x)=\sum_{i=1}^{n}(i-1)!\frac{x^i}{i!}=\sum_{i=1}^{n}\frac{x^i}{i}\\\therefore \begin{bmatrix}n\\m\end{bmatrix}={[x^n]A^m(x)}</script><h4 id="2-3、第一类斯特林数的性质"><a href="#2-3、第一类斯特林数的性质" class="headerlink" title="2.3、第一类斯特林数的性质"></a>2.3、第一类斯特林数的性质</h4><script type="math/tex; mode=display">\begin{aligned}&\begin{bmatrix}0\\0\end{bmatrix}=1\\&\begin{bmatrix}n\\0\end{bmatrix}=0,n>0\\&\begin{bmatrix}n\\1\end{bmatrix}=(n-1)!\\&\begin{bmatrix}n\\n-1\end{bmatrix}=C_n^2\\&\begin{bmatrix}n\\n-2\end{bmatrix}=(n-1)!\times \sum_{i=1}^{n-1}\frac{1}{i}\\&\begin{bmatrix}n\\n-2\end{bmatrix}=2C_n^3+3C_n^4\\&\sum_{k=0}^{n}\begin{bmatrix}n\\k\end{bmatrix}=n!\end{aligned}</script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cdqNTT</title>
      <link href="/2022/08/24/cdqntt/"/>
      <url>/2022/08/24/cdqntt/</url>
      
        <content type="html"><![CDATA[<h2 id="分治NTT"><a href="#分治NTT" class="headerlink" title="分治NTT"></a>分治NTT</h2><p>引出问题：</p><script type="math/tex; mode=display">给定序列g_1,g_2,g_3...g_{n-1},现有序列f满足f_i=\sum_{j=1}^{i}f_{i-j}g_j,且f_0=1，求序列f_0,f_1,f_2,f_3....f_n-1 \\答案模998244353</script><p>看到这个递推式，第一眼一定是暴力，但是我们会发现，暴力的时间复杂度为$O(n^2)$，显而易见时间复杂度太高</p><p>那么这个时候，我们不妨考虑CDQ分治</p><script type="math/tex; mode=display">我们考虑序列区间[left,right]中[left,mid]对区间[mid+1,right]的影响\\显而易见，对于x\in[left,mid]而言，它对y\in[mid+1,right]贡献为：\\f_x\times g_{y-x}\\\therefore f_y=f_y+\sum_{i=left}^{mid}f_ig_{y-i}</script><p>所以我们可以通过NTT将卷积的部分给计算出来，然后将相应的部分加上去便可以得到最后的答案。</p><p>计算一下时间复杂度：</p><p>由于我们是分治再套上NTT求卷积因此，时间复杂度为：$O(nlog^2n)$</p><p><strong>分治NTT模版</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">Poly f,g;&#x2F;&#x2F;封装的多项式&#x2F;&#x2F; CDQ分治，先求出f[l,mid)​，可以发现这部分对区间的f[mid,r)​的贡献是f[l,mid)∗g[0,r−l)void cdqntt(int l, int r)&#123;    if (l &#x3D;&#x3D; r)    &#123;        、、、、、、、        return;    &#125;    int mid &#x3D; (l + r) &gt;&gt; 1;    cdqntt(l, mid);    f.a.clear(), g.a.clear();    for (int i &#x3D; l; i &lt;&#x3D; mid; i++)    &#123;        f.a.push_back(F[i]);    &#125;    for (int i &#x3D; 0; i &lt;&#x3D; r - l; i++)    &#123;        if (i &#x3D;&#x3D; 0)        &#123;            g.a.push_back(0);        &#125;        else        &#123;            g.a.push_back(G[i]);        &#125;    &#125;    Poly fA &#x3D; (Poly)f * g;&#x2F;&#x2F;多项式NTT计算    for (int i &#x3D; mid + 1; i &lt;&#x3D; r; i++)    &#123;        &#x2F;&#x2F;计算贡献    &#125;    cdqntt(mid + 1, r);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>From FFT to NTT</title>
      <link href="/2022/08/22/from-fft-to-ntt/"/>
      <url>/2022/08/22/from-fft-to-ntt/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p><strong>FFT</strong>全称（Fast Fourier Transformation）<strong>快速傅里叶变换</strong></p><p><strong>NTT</strong>全称（Fast Number Theoretical Transformation）<strong>快速数论变换</strong></p><h3 id="1-1、引入问题"><a href="#1-1、引入问题" class="headerlink" title="1.1、引入问题"></a>1.1、引入问题</h3><p>如何计算多项式$f(x)$与$g(x)$的乘积？</p><p>例如：计算$f(x)=1+x^2+x^3$与$g(x)=1+x^5+x^6+x^7$的乘积</p><p>通常而言，我们思考暴力的算法：</p><script type="math/tex; mode=display">\begin{aligned}f(x)\times g(x)&=1\times(1+x^5+x^6+x^7)+x^2\times(1+x^5+x^6+x^7)+x^3\times(1+x^5+x^6+x^7)\\& =1+x^5+x^6+x^7+x^2+x^7+x^8+x^9+x^3+x^8+x^9+x^{10}\\& =1+x^2+x^3+x^5+x^6+2x^7+2x^8+2x^9+x^{10}\end{aligned}</script><p>显而易见，这个算法的时间复杂度是$O(n^2)$</p><p>那么有快速的计算方法吗？</p><p>当然是有的，于1965年由J.W.库利和T.W.图基提出FFT算法，可以在$O(nlogn)$的时间复杂度下计算出答案。</p><h3 id="1-2、定义一些记号："><a href="#1-2、定义一些记号：" class="headerlink" title="1.2、定义一些记号："></a>1.2、<strong>定义一些记号</strong>：</h3><p><strong>#</strong> $f(x)$表示一个多项式</p><p><strong>#</strong>对于一个$n$次多项式$f(x)$的第$m$项，记为$f[m]$;换言之，$f(x)=\sum_{i=0}^{n}f[i]x^i$</p><h3 id="1-3、多项式乘法理解"><a href="#1-3、多项式乘法理解" class="headerlink" title="1.3、多项式乘法理解"></a>1.3、多项式乘法理解</h3><p>例如：现有两个$n$次多项式$f(x)$与$g(x)$,需要计算这两个多项式的乘积.</p><p>不妨设$h(x)=f(x)\times g(x)$</p><p>那么通过<strong>1.1</strong>中的例子，我们可以发现，其实$h[k]=\sum_{i=0}^{k}f[i]g[k-i]$</p><p>换言之，我们可以<strong>理解</strong>为：要想乘出$x^k$,需要$f(x)$的$x^i$项和$g(x)$的$x^{k-i}$项相乘，然后将他们的相乘的贡献累加便是$h[k]$</p><h3 id="1-4、卷积"><a href="#1-4、卷积" class="headerlink" title="1.4、卷积"></a>1.4、卷积</h3><p>将形如:$h[k]=\sum_{i⊕j}f[i]g[j]$的式子称为<strong>卷积</strong>，其中⊕在数学中称为假设符号（假设什么运算）</p><p>例如，在多项式乘法中，为加法卷积：$h[k]=\sum_{i+j}f[i]g[j]$</p><p>因此，对于卷积可以利用<strong>FFT</strong>构造多项式进行计算！</p><h2 id="2、FFT思想"><a href="#2、FFT思想" class="headerlink" title="2、FFT思想"></a>2、FFT思想</h2><h3 id="2-1、多项式的点值表达式"><a href="#2-1、多项式的点值表达式" class="headerlink" title="2.1、多项式的点值表达式"></a>2.1、多项式的点值表达式</h3><p>我们可以从</p><p>得出推论：在平面直角坐标系中，$n+1$个点就能唯一确定一个$n$次多项式。</p><p>因此，对于一个$n$次多项式$f(x)$而言，我们可以用$n+1$个点来描述一个多项式；换言之，两个多项式相乘，等价于两个多项式的对应点值相乘。(点值的乘法对应着整个多项式的乘法,也就是<strong>浓缩了整个多项式</strong>)</p><p>将能唯一表达一个$n$次多项式$f(x)$的$n+1$个点,称为$f(x)$的点值表达式。</p><script type="math/tex; mode=display"> 例如：n次多项式f(x)的点值表达式为：\\\left\{(x_1,f(x_1)),(x_2,f(x_2)),(x_3,f(x_3))......(x_{n+1},f(x_{n+1}))\right\}</script><p>由于$n$次多项式$f(x)$与$n$次多项式$g(x)$,他们的乘积一定是一个$2n+1$次的多项式，所以我们只需要对$f(x)$和$g(x)$找到$2n+1$个对应的点，然后将他们对应点的<strong>纵坐标</strong>相乘，便可以确定多项式$f(x)\times g(x)$的点值表达式；</p><script type="math/tex; mode=display">例如：2n+1次多项式f(x)\times g(x)的点值表达式为：    \\\left\{(x_1,f(x_1)g(x_1)),(x_2,f(x_2)g(x_2)),(x_3,f(x_3)g(x_3))......(x_{2n+1},f(x_{2n+1})g(x_{2n+1}))\right\}</script><p>最后我们将多项式$f(x)\times g(x)$的点值表达式转化为多项式的一般表达式（系数表达式）便得到了我们想要的多项式乘积了。</p><p><strong>而这也是FFT算法的流程</strong></p><h3 id="2-2、DFT-amp-IDFT"><a href="#2-2、DFT-amp-IDFT" class="headerlink" title="2.2、DFT&amp;IDFT"></a>2.2、DFT&amp;IDFT</h3><p><strong>DFT</strong>：把多项式的系数表达式转化为点值表达式的变换过程</p><p><strong>IDFT</strong>：把多项式的点值表达式转化为系数表达式的变换过程</p><p><strong>下面这张图便对比了FFT算法与暴力算法的区别</strong></p><p><img src="/2022/08/22/from-fft-to-ntt/1.jpg" alt></p><h2 id="3、FFT的实现"><a href="#3、FFT的实现" class="headerlink" title="3、FFT的实现"></a>3、FFT的实现</h2><h3 id="3-1、DFT"><a href="#3-1、DFT" class="headerlink" title="3.1、DFT"></a>3.1、DFT</h3><p>​    由于我们想要多项式的点值表达式，所以我们需要利用一些方法获得多项式的上的点；但是细想一下会发现，</p><script type="math/tex; mode=display">如果对于一个n次多项式f(x)，我们任选n+1个点的横坐标x_1,x_2,x_3....x_n,x_{n+1},\\再分别计算其对应的纵坐标f(x_1),f(x_2),f(x_3)...f(x_n),f(x_{n+1})的时间复杂度是O(n^2)\\(由于计算每个横坐标的时间复杂度是O(n),但是有n个点)；</script><p>​    这样一来，我们通过随便找$n+1$个点的方式，会让我们的时间复杂度和暴力没什么区别！</p><p>​    那么有快速找到$n+1$个点的方法么？答案当然是有的！</p><p>​    我们可以这样考虑问题：</p><h4 id="3-1-1、Good-idea-1：函数的奇偶性"><a href="#3-1-1、Good-idea-1：函数的奇偶性" class="headerlink" title="3.1.1、Good idea 1：函数的奇偶性"></a>3.1.1、Good idea 1：函数的奇偶性</h4><p>​    首先，我们不考虑一般多项式，只考虑一个简单的多项式$f(x)=x^2$</p><p><img src="/2022/08/22/from-fft-to-ntt/2.jpg" alt></p><p>那么，如果我们要从$f(x)$中选择8个点，我们如何选择？</p><p>这里我们需要注意$f(x)$的一个优美的性质————$f(x)$是偶函数，所以我们计算出一个点$(x,f(x))$后，便可以立马知道点$(-x,f(x))$也一定是$y(x)$上的点。</p><p>那么，如果$f(x)=x^3$,应该如何处理喃？</p><p><img src="/2022/08/22/from-fft-to-ntt/3.jpg" alt></p><p>显而易见，我们会发现$f(x)=x^3$是一个奇函数，它与偶函数的区别在于，奇函数上的点是关于原点对称的，换言之，如果我们计算出点$(x,f(x))$,那就可以知道点$(-x,-f(x))$也是多项式上的点！</p><p>既然这样，对于多项式$f(x)=1+2x^2+3x^3+4x^4+5x^5$</p><p>那么我可以将$f(x)$中按幂数分离，因此可得$f(x)=(1+2x^2+4x^4)+(3x^3+5x^5)$</p><script type="math/tex; mode=display">不妨设f_o(x)=1+2x+4x^2,f_e(x)=3x+5x^2\\那么有：\begin{aligned}f(x)&=(1+2x^2+4x^4)+x(3x^2+5x^4)\\&=f_o(x^2)+xf_e(x^2)\end{aligned}</script><p>这样，对于$f_o(x^2),f_e(x^2)$都是关于$x^2$的多项式，我们便可以利用函数的奇偶性快速找到6个点，然后利用点值表达式的计算方式计算出该函数的点值表达式。</p><p>然后我们可以推广到一般多项式$f(x)=a_0+a_1x+a_2x^2+…..a_nx^{n}$</p><script type="math/tex; mode=display">可以设f(x)按照幂数分离，将偶幂数部分设为f_e(x^2),将奇幂数部分提出一个x后的部分设为f_o(x^2)\\所以：f(x)=f_e(x^2)+xf_o(x^2)\\然而对于，f_e(x)与f_o(x)而言，最高次都变成了\frac{n}{2}-1\\同理可以推出重要结论\begin{cases}f(x_i)=f_e(x_i^2)+x_if_o(x_i^2)\\f(-x_i)=f_e(x_i^2)-x_if_o(x_i^2)\end{cases}\\这样一来，问题得到了简化：\\分别求f_e(x^2),f_o(x^2)在x_1^2,x_2^2....x_{\frac{n}{2}}^2的值,因为这样我们便可以得到\pm x_1,\pm x_2...\pm x_\frac{n}{2}这n个点</script><p>而对于$f_e(x)与f_o(x)$,我们可以重复$f(x)$的奇偶分离的方式；这样我们可以把对于$n$次多项式转化为求$\frac{n}{2}$次多项式（类似分治的思想），所以这个思路下，求多项式点值表达式的时间复杂度是$O(nlogn)$</p><p>因此，只要我们最后找到的点为合法的点，那么算法就是合法的！</p><p>但是这里出现了一个问题：对于$f(x)$中的$[\pm x_1,\pm x_2…\pm x\frac{n}{2}]$而言，每一个$\pm x_i$都是$\pm$配对的；但是对于$f_o(x^2)与f_e(x^2)$中的$[x_1^2,x_2^2..x_n^2]$而言,没有一个$x_i^2$是配对的;所以在实数域下，是找不到满足条件的点的！</p><p>不过解决问题的的方法总比问题多，所以我们考虑把数域扩展到复数域！</p><h4 id="3-1-2、Good-idea-2：复数域下的单位根"><a href="#3-1-2、Good-idea-2：复数域下的单位根" class="headerlink" title="3.1.2、Good idea 2：复数域下的单位根"></a>3.1.2、Good idea 2：复数域下的单位根</h4><h5 id="3-1-2-1解决疑惑：为何复数域下，满足3-1-1中的分治找点"><a href="#3-1-2-1解决疑惑：为何复数域下，满足3-1-1中的分治找点" class="headerlink" title="3.1.2.1解决疑惑：为何复数域下，满足3.1.1中的分治找点"></a>3.1.2.1<strong>解决疑惑：为何复数域下，满足3.1.1中的分治找点</strong></h5><p>一个简单例子：求多项式$f(x)=1+2x+3x^3$的点值表达式</p><script type="math/tex; mode=display">在这里我们不妨设这四个点的横坐标为:x_1,x_2,x_3,x_4\\那么根据分治的规则:那么必须保证x_1=-x_2,x_3=-x_4\\\therefore x_1^2=x_2……2,x_3^2=x_4^2\\\because x_1^2=-x_3^2,那么可令x_1=1\\\therefore x_3^2=-1\\\because 在复数域下有i^2=-1\\\therefore x_3=i,x_4=-i\\\therefore 对于横坐标x_1=1,x_2=-1,x_3=i,x_4=-i是满足条件的</script><h5 id="3-1-2-2引入单位根"><a href="#3-1-2-2引入单位根" class="headerlink" title="3.1.2.2引入单位根"></a>3.1.2.2<strong>引入单位根</strong></h5><p><strong>单位根</strong>：在复平面上，以单位圆点为起点，单位圆的 $n$ 等分点为终点，在单位圆上可以得到 $n$ 个复数，设幅角为正且最小的复数为$n$次单位根，记作$\omega_n$</p><p><strong>#</strong>推导$\omega_n$</p><script type="math/tex; mode=display">由于在复平面当中，故俯角最小为\frac{2\pi}{n},所以可知在复平面中，\omega_n=cos\frac{2\pi}{n}+isin\frac{2\pi}{n}\\又\because 欧拉公式为 e^{i\theta}=cos\theta+isin\theta\\\therefore\omega_n=e^{i\frac{2\pi}{n}}</script><p><strong>#</strong>推导单位根的一些性质:</p><p>(1)$w_n^{a}\times w_n^{b}=w_n^{i+j}$</p><script type="math/tex; mode=display">\begin{aligned}w_n^{a}\times w_n^{b}&=e^{ai\frac{2\pi}{n}}\times e^{bi\frac{2\pi}{n}}\\&=e^{(a+b)i\frac{2\pi}{n}}\\&=(e^{i\frac{2\pi}{n}})^{a+b}\\&=w_n^{a+b}\end{aligned}</script><p>(2)$w_{rn}^{rk}=w_n^{k}$</p><script type="math/tex; mode=display">w_{rn}^{rk}=(e^{i\frac{2\pi}{rn}})^{rk}=(e^{i\frac{2\pi}{rn}r})^k=(e^{i\frac{2\pi}{n}})^k=w_n^{k}</script><p>(3)$w<em>n^{2k}=w</em>{\frac{n}{2}}^{k}$</p><script type="math/tex; mode=display">w_n^{2k}=e^{2ki\frac{2\pi}{n}}=e^{ki\frac{2\pi}{\frac{n}{2}}}=w_{\frac{n}{2}}^{k}</script><p>(4)如果$n$是偶数, $w_n^{k+\frac{n}{2}}=-w_n^{k}$</p><script type="math/tex; mode=display">\begin{aligned}w_n^{k+\frac{n}{2}}&=(e^{i\frac{2\pi}{n}})^{k+\frac{n}{2}}\\&=e^{ki\frac{2\pi}{n}+i\pi}\\&=e^{i\pi}e^{ki\frac{2\pi}{n}}\\&=-1\times e^{ki\frac{2\pi}{n}}\\&=-w_n^{k}\end{aligned}</script><h5 id="3-1-2-3代入单位根"><a href="#3-1-2-3代入单位根" class="headerlink" title="3.1.2.3代入单位根"></a>3.1.2.3代入单位根</h5><p><strong>现已知$f(x)=f_e(x^2)+xf_o(x^2)$</strong></p><p>(1)代入$x=w_n^{k},k&lt;\frac{n}{2}$</p><script type="math/tex; mode=display">\begin{aligned}f(w_n^{k})&=f_e(w_n^{2k})+w_n^{k}f_o(w_n^{2k})\\&=f_e(w_{\frac{n}{2}}^{k})+w_n^{k}f_o(w_{\frac{n}{2}}^{k})\end{aligned}</script><p>(2)代入$x=w_n^{k+\frac{n}{2}},k&lt;\frac{n}{2}$</p><script type="math/tex; mode=display">\begin{aligned}f(w_n^{k+\frac{n}{2}})&=f_e(w_n^{2(k+\frac{n}{2})})+w_n^{k+\frac{n}{2}}f_o(w_n^{2(k+\frac{n}{2})})\\&=f_e(w_{\frac{n}{2}}^{k+\frac{n}{2}})+w_n^{k+\frac{n}{2}}f_o(w_{\frac{n}{2}}^{k+\frac{n}{2}})\\&=f_e(w_{\frac{n}{2}}^{k+\frac{n}{2}})-w_n^kf_o(w_{\frac{n}{2}}^{k+\frac{n}{2}})\\&=f_e(w_{\frac{n}{2}}^{k+\frac{n}{2}})-w_n^kf_o(w_{\frac{n}{2}}^{k+\frac{n}{2}})\\&=f_e(w_n^{2k+n})-w_n^kf_o(w_n^{2k+n})\\&=f_e(w_n^{2k})-w_n^kf_o(w_n^{2k})\\&=f_e(w_{\frac{n}{2}}^{k})-w_n^kf_o(w_{\frac{n}{2}}^{k})\end{aligned}</script><script type="math/tex; mode=display">那么得到（1）（2）两个结论，我们可以：\\如果知道多项式f_e(x),f_o(x)在w_{\frac{n}{2}}^0,w_{\frac{n}{2}}^1,w_{\frac{n}{2}}^2....w_{\frac{n}{2}}^{\frac{n}{2}-1}的点值表达式，\\利用（1）可以O(n)求出f(x)在w_{\frac{n}{2}}^0,w_{\frac{n}{2}}^1,w_{\frac{n}{2}}^2....w_{\frac{n}{2}}^{\frac{n}{2}-1}的点值表达式;\\利用（2）可以O(n)求出f(x)在w_{\frac{n}{2}}^{\frac{n}{2}},w_{\frac{n}{2}}^{\frac{n}{2}+1},w_{\frac{n}{2}}^{\frac{n}{2}+2}....w_{\frac{n}{2}}^{n-1}的点值表达式;</script><p>既然这样，那么我们再<strong>3.1.1</strong>中$O(nlogn)$求多项式的思路是可行的！！！！</p><h4 id="3-1-3：优化分治（蝴蝶变换）"><a href="#3-1-3：优化分治（蝴蝶变换）" class="headerlink" title="3.1.3：优化分治（蝴蝶变换）"></a>3.1.3：优化分治（蝴蝶变换）</h4><p>我们用下面一张图来表示<strong>3.1.1</strong>中的分治过程：</p><p><img src="/2022/08/22/from-fft-to-ntt/4.jpg" alt></p><p>显然,对于上述过程是可以使用递归的写法,但是递归的写法常数过大，</p><p>但是我们需要观察每个数最终的位置,最终发现对于幂数$i$而言，其实$i$最终在序列中的位置其实是$i$在二进制下翻转（蝴蝶变换）得到的数</p><script type="math/tex; mode=display">设i通过蝴蝶变换后的位置为reverse[i],i在二进制下的位数为len(i)\\那么有reverse[i]=⌊\frac{reverse⌊\frac{x}{2}⌋}{2}⌋+(i\times(mod2))\times(\frac{len(i)}{2})</script><p>因此我们可以把每个数都放在其最终位置上，不断往上迭代即可！</p><p><strong>#</strong>附一个蝴蝶变换的小结论：</p><p>蝴蝶变换过后的序列，任取三个数都不构成等差数列。</p><h3 id="3-2、IDFT"><a href="#3-2、IDFT" class="headerlink" title="3.2、IDFT"></a>3.2、IDFT</h3><p>现在我们已经知道$k$次多项式$f(x)$的点值表达式：${(w_n^0,f(w_n^0)),(w_n^1,f(w_n^1)),(w_n^2,f(w_n^2)),….,(w_n^n,f(w_n^n))} (k\leq n,n=2^m-1)$</p><p>那么可一把点值表达式改写成与之对应的矩阵的形式：</p><script type="math/tex; mode=display">\begin{bmatrix}&1 &(w_n^0)^1 &(w_n^0)^2 &\dots&(w_n^0)^n\\&1 &(w_n^1)^1 &(w_n^1)^2 &\dots&(w_n^1)^n\\&1 &(w_n^2)^1 &(w_n^2)^2 &\dots&(w_n^2)^n\\&\vdots &\vdots &\vdots &\ddots &\vdots\\&1 &(w_n^n)^1 &(w_n^n)^2 &\dots&(w_n^n)^n\\\end{bmatrix}\times\begin{bmatrix}&a_0\\&a_1\\&a_2\\&\vdots\\&a_n \end{bmatrix}=\begin{bmatrix}&f(w_n^0)\\&f(w_n^1)\\&f(w_n^2)\\&\vdots\\&f(w_n^n)\end{bmatrix}</script><p>那么在这个矩阵乘法中：</p><script type="math/tex; mode=display">\begin{bmatrix}&a_0\\&a_1\\&a_2\\&\vdots\\&a_n \end{bmatrix}即为多项式的系数表达式</script><script type="math/tex; mode=display">那么我们只需要两边同时乘以\begin{bmatrix}&1 &(w_n^0)^1 &(w_n^0)^2 &\dots&(w_n^0)^n\\&1 &(w_n^1)^1 &(w_n^1)^2 &\dots&(w_n^1)^n\\&1 &(w_n^2)^1 &(w_n^2)^2 &\dots&(w_n^2)^n\\&\vdots &\vdots &\vdots &\ddots &\vdots\\&1 &(w_n^n)^1 &(w_n^n)^2 &\dots&(w_n^n)^n\\\end{bmatrix}的逆矩阵，便可以得到多项式的系数表达式</script><script type="math/tex; mode=display">因为矩阵\begin{bmatrix}&f(w_n^0)\\&f(w_n^1)\\&f(w_n^2)\\&\vdots\\&f(w_n^n)\end{bmatrix}是一个关于f(w_n^i)已知的矩阵</script><script type="math/tex; mode=display">所以最后IDFT这一块的问题等价于求矩阵\begin{bmatrix}&1 &(w_n^0)^1 &(w_n^0)^2 &\dots&(w_n^0)^n\\&1 &(w_n^1)^1 &(w_n^1)^2 &\dots&(w_n^1)^n\\&1 &(w_n^2)^1 &(w_n^2)^2 &\dots&(w_n^2)^n\\&\vdots &\vdots &\vdots &\ddots &\vdots\\&1 &(w_n^n)^1 &(w_n^n)^2 &\dots&(w_n^n)^n\\\end{bmatrix}的逆矩阵\\在这里我们不妨考虑，该矩阵的每一行：\\对于每j行有:[1\space\space\space(w_n^j)^1\space\space\space(w_n^j)^2 \dots(w_n^j)^n]肯定有逆矩阵的第j列与之相乘\\\begin{bmatrix}&1 &(w_n^j)^1 &(w_n^j)^2 &\dots&(w_n^j)^p&\dots&(w_n^j)^n\\\end{bmatrix}\times \begin{bmatrix}&x_0\\&x_1\\&x_2\\&\vdots\\&x_q\\&\vdots\\&x_n\\\end{bmatrix}\\\therefore对于每一项有w_n^{jp}\times x_q\\这个我们考虑单位根性质：w_n^j\times w_n^{n-j}=w_n^n=1\\\therefore 可以构造x_q=w_n^{(n-j)p}\\\therefore w_n^{jp}\times x_q=w_n^{np}=1\\\therefore \begin{bmatrix}&x_0\\&x_1\\&x_2\\&\vdots\\&x_q\\&\vdots\\&x_n\\\end{bmatrix}=\begin{bmatrix}&w_n^{(n-j)0}\\&w_n^{(n-j)1}\\&w_n^{(n-j)2}\\&\vdots\\&w_n^{(n-j)p}\\&\vdots\\&w_n^{(n-j)n}\\\end{bmatrix}</script><script type="math/tex; mode=display">\therefore\begin{bmatrix}&1 &(w_n^j)^1 &(w_n^j)^2 &\dots&(w_n^j)^p&\dots&(w_n^j)^n\\\end{bmatrix}\times\begin{bmatrix}&w_n^{(n-j)0}\\&w_n^{(n-j)1}\\&w_n^{(n-j)2}\\&\vdots\\&w_n^{(n-j)p}\\&\vdots\\&w_n^{(n-j)n}\\\end{bmatrix}=n\\又\because\forall d\in Z,d\neq 0且n-j+d>0有\begin{bmatrix}&1 &(w_n^j)^1 &(w_n^j)^2 &\dots&(w_n^j)^p&\dots&(w_n^j)^n\\\end{bmatrix}\times\begin{bmatrix}&w_n^{(n-j+d)0}\\&w_n^{(n-j+d)1}\\&w_n^{(n-j+d)2}\\&\vdots\\&w_n^{(n-j+d)p}\\&\vdots\\&w_n^{(n-j+d)n}\\\end{bmatrix}=0</script><script type="math/tex; mode=display">\therefore\begin{bmatrix}&1 &(w_n^0)^1 &(w_n^0)^2 &\dots&(w_n^0)^n\\&1 &(w_n^1)^1 &(w_n^1)^2 &\dots&(w_n^1)^n\\&1 &(w_n^2)^1 &(w_n^2)^2 &\dots&(w_n^2)^n\\&\vdots &\vdots &\vdots &\ddots &\vdots\\&1 &(w_n^n)^1 &(w_n^n)^2 &\dots&(w_n^n)^n\\\end{bmatrix}\times\begin{bmatrix}&1 &(w_n^{n-0})^1 &(w_n^{n-0})^2 &\dots&(w_n^{n-0})^n\\&1 &(w_n^{n-1})^1 &(w_n^{n-1})^2 &\dots&(w_n^{n-1})^n\\&1 &(w_n^{n-2})^1 &(w_n^{n-2})^2 &\dots&(w_n^{n-2})^n\\&\vdots &\vdots &\vdots &\ddots &\vdots\\&1 &(w_n^{n-n})^1 &(w_n^{n-n})^2 &\dots&(w_n^{n-n})^n\\\end{bmatrix}=\begin{bmatrix}&n &0 &0 &\dots&0\\&0 &n &0 &\dots&0\\&0 &0 &n &\dots&0\\&\vdots &\vdots &\vdots &\ddots &\vdots\\&0 &0 &0 &\dots&n\\\end{bmatrix}</script><script type="math/tex; mode=display">\therefore 矩阵的逆矩阵为：\frac{1}{n}\begin{bmatrix}&1 &(w_n^{n-0})^1 &(w_n^{n-0})^2 &\dots&(w_n^{n-0})^n\\&1 &(w_n^{n-1})^1 &(w_n^{n-1})^2 &\dots&(w_n^{n-1})^n\\&1 &(w_n^{n-2})^1 &(w_n^{n-2})^2 &\dots&(w_n^{n-2})^n\\&\vdots &\vdots &\vdots &\ddots &\vdots\\&1 &(w_n^{n-n})^1 &(w_n^{n-n})^2 &\dots&(w_n^{n-n})^n\\\end{bmatrix}</script><script type="math/tex; mode=display">\therefore 系数\begin{bmatrix}&a_0\\&a_1\\&a_2\\&\vdots\\&a_n \end{bmatrix}=\frac{1}{n}\begin{bmatrix}&1 &(w_n^{n-0})^1 &(w_n^{n-0})^2 &\dots&(w_n^{n-0})^n\\&1 &(w_n^{n-1})^1 &(w_n^{n-1})^2 &\dots&(w_n^{n-1})^n\\&1 &(w_n^{n-2})^1 &(w_n^{n-2})^2 &\dots&(w_n^{n-2})^n\\&\vdots &\vdots &\vdots &\ddots &\vdots\\&1 &(w_n^{n-n})^1 &(w_n^{n-n})^2 &\dots&(w_n^{n-n})^n\\\end{bmatrix}\times\begin{bmatrix}&f(w_n^0)\\&f(w_n^1)\\&f(w_n^2)\\&\vdots\\&f(w_n^n)\end{bmatrix}</script><p>最后我们注意到对于$w_n^{n-j}$，其实它为$w_n^j$的共轭复数；因此在IDFT中，只需将DFT中的乘以单位根变为乘以其共轭复数即可，但是分治结束后，需要除以$n$</p><p><strong>其实上述需要求逆的矩阵是一个范德蒙德矩阵，也可以利用范德蒙德矩阵求逆的过程</strong></p><p>好了！耗时三天终于敲完FFT的公式推导了！！！下面的代码实现就比较容易了！</p><h2 id="4、FFT代码实现"><a href="#4、FFT代码实现" class="headerlink" title="4、FFT代码实现"></a>4、FFT代码实现</h2><p>直接上模版：</p><pre class="language-c++" data-language="c++"><code class="language-c++">double PI &#x3D; acos(-1.0);&#x2F;&#x2F;复数类struct Complex&#123;    double r, i;    Complex() &#123;&#125;    Complex(double r, double i) : r(r), i(i) &#123;&#125;    inline void real(const double &amp;x) &#123; r &#x3D; x; &#125;    inline double real() &#123; return r; &#125;    inline Complex operator+(const Complex &amp;rhs) const    &#123;        return Complex(r + rhs.r, i + rhs.i);    &#125;    inline Complex operator-(const Complex &amp;rhs) const    &#123;        return Complex(r - rhs.r, i - rhs.i);    &#125;    inline Complex operator*(const Complex &amp;rhs) const    &#123;        return Complex(r * rhs.r - i * rhs.i, r * rhs.i + i * rhs.r);    &#125;    inline Complex operator*(const double &amp;rhs) const    &#123;        return Complex(r * rhs, i * rhs);    &#125;    inline void operator&#x2F;&#x3D;(const double &amp;x)    &#123;        r &#x2F;&#x3D; x, i &#x2F;&#x3D; x;    &#125;    inline void operator*&#x3D;(const Complex &amp;rhs)    &#123;        *this &#x3D; Complex(r * rhs.r - i * rhs.i, r * rhs.i + i * rhs.r);    &#125;    inline void operator+&#x3D;(const Complex &amp;rhs)    &#123;        r +&#x3D; rhs.r, i +&#x3D; rhs.i;    &#125;    inline Complex conj()    &#123;        return Complex(r, -i);    &#125;&#125;;&#x2F;&#x2F; i的二进制翻转数组int bitrev[maxn];&#x2F;&#x2F; FFT预处理void fft_prepare(int n)&#123;    int bits &#x3D; 0;    &#x2F;&#x2F;由于FFT需要项数为2的整数次方倍，所以多项式（形式）次数为第一个大于n的二的正整数次方，bits表示多少位    while ((1 &lt;&lt; bits) &lt; n)    &#123;        bits++;    &#125;    for (int i &#x3D; 0; i &lt; n; i++)    &#123;        &#x2F;&#x2F;递推式：二进制翻转        &#x2F;&#x2F; 0 1 2 3 4 5 6 7        &#x2F;&#x2F; 0|4|2|6|1|5|3|7        bitrev[i] &#x3D; bitrev[i &gt;&gt; 1] &gt;&gt; 1 | ((i &amp; 1) &lt;&lt; (bits - 1));    &#125;&#125;&#x2F;&#x2F;快速傅里叶变换系数表达式转换为点值表达式void fft(Complex *a, int n, int type &#x3D; 1)&#123;    &#x2F;&#x2F;求出要迭代的序列    for (int i &#x3D; 0; i &lt; n; i++)    &#123;        if (i &lt; bitrev[i])        &#123;            swap(a[i], a[bitrev[i]]);        &#125;    &#125;    &#x2F;&#x2F;待合并区间的中点    for (int mid &#x3D; 1; mid &lt; n; mid &lt;&lt;&#x3D; 1)    &#123;        &#x2F;&#x2F;单位根        Complex Wn&#123;cos(PI &#x2F; mid), type * sin(PI &#x2F; mid)&#125;;        &#x2F;&#x2F; R是区间的右端点，j表示已经到哪个位置        for (int R &#x3D; mid &lt;&lt; 1, j &#x3D; 0; j &lt; n; j +&#x3D; R)        &#123;            Complex w&#123;1, 0&#125;; &#x2F;&#x2F;幂            &#x2F;&#x2F;枚举左半部分            for (int k &#x3D; 0; k &lt; mid; k++, w *&#x3D; Wn)            &#123;                &#x2F;&#x2F;蝴蝶效应                Complex x &#x3D; a[j + k], y &#x3D; w * a[j + mid + k];                a[j + k] &#x3D; x + y;                a[j + k + mid] &#x3D; x - y;            &#125;        &#125;    &#125;    &#x2F;&#x2F; type为-1则进行逆变换，即IDFT    if (type &#x3D;&#x3D; -1)    &#123;        for (int i &#x3D; 0; i &lt; n; i++)        &#123;            a[i].r &#x2F;&#x3D; n;        &#125;    &#125;&#125;</code></pre><p>代码有注释，就不细说了！</p><h2 id="5、FFT的瓶颈"><a href="#5、FFT的瓶颈" class="headerlink" title="5、FFT的瓶颈"></a>5、FFT的瓶颈</h2><p>虽然FFT的在时间复杂度上非常优秀，但是计算机在计算时仍然会遇到一些问题！</p><p>例如：由于复数类中使用的是<strong>double</strong>类型，而且在计算单位根存在除法，除此之外计算机计算下$\pi$始终是一个逼近值，因此必然也必然会存在误差！所以在特殊情况下计算机计算会出现一定的误差！</p><p>但是有没有解决办法喃？</p><p>可以说在一定情况下是可以避免误差的！这个时候就要引出<strong>原根</strong></p><h2 id="6、To-NTT"><a href="#6、To-NTT" class="headerlink" title="6、To NTT"></a>6、To NTT</h2><p><strong>原根</strong>：</p><script type="math/tex; mode=display">设m\in N^*,a\in Z,若gcd(a,m)=1,且\delta_m(a)=\varphi(m),则称a为模m的原根\\注：\delta_m(a)为a模m的阶，\varphi为m的欧拉函数</script><p>通过定义我们可以知道，原根是一种定义在模意义下的定义，因此对于<strong>FFT</strong>遇到的的精度问题，我们也只能保证在模意义下的答案正确</p><p>我们通过推导可以发现原根具有和单位根几乎一样的性质，因此我们可以通过原根推出基本相同的结论</p><p>这样一来我们就不必考虑复数域了！！</p><p>也可以理解为<strong>NTT</strong>其实就是把<strong>FFT</strong>中的单位根换成了原根</p><h3 id="6-1-NTT代码实现"><a href="#6-1-NTT代码实现" class="headerlink" title="6.1 NTT代码实现"></a>6.1 NTT代码实现</h3><pre class="language-c++" data-language="c++"><code class="language-c++">const int g &#x3D; 3, gi &#x3D; 332748118, mod &#x3D; 998244353;&#x2F;&#x2F; 998244353的一个原根为3且998244353-1&#x3D;2^23*119，3在模998244353意义下的逆元为332748118int qp(int a, int n)&#123;    int ans &#x3D; 1;    while (n)    &#123;        if (n &amp; 1)        &#123;            ans &#x3D; ans * a % mod;        &#125;        a &#x3D; a * a % mod;        n &gt;&gt;&#x3D; 1;    &#125;    return ans;&#125;&#x2F;&#x2F; i的二进制翻转数组int bitrev[maxn];&#x2F;&#x2F; NTT预处理void ntt_prepare(int n)&#123;    int bits &#x3D; 0;    &#x2F;&#x2F;由于NTT需要项数为2的整数次方倍，所以多项式（形式）次数为第一个大于n的二的正整数次方，bits表示多少位    while ((1 &lt;&lt; bits) &lt; n)    &#123;        bits++;    &#125;    for (int i &#x3D; 0; i &lt; n; i++)    &#123;        &#x2F;&#x2F;递推式：二进制翻转        &#x2F;&#x2F; 0 1 2 3 4 5 6 7        &#x2F;&#x2F; 0|4|2|6|1|5|3|7        bitrev[i] &#x3D; bitrev[i &gt;&gt; 1] &gt;&gt; 1 | ((i &amp; 1) &lt;&lt; (bits - 1));    &#125;&#125;&#x2F;&#x2F; NTT，type&#x3D;1时系数表示法转点值表示法，否则点值表示法转系数表示法void NTT(int *a, int n, int type &#x3D; 1)&#123;    for (int i &#x3D; 0; i &lt; n; i++)    &#123;        if (i &lt; bitrev[i])        &#123;            swap(a[i], a[bitrev[i]]);        &#125;    &#125;    &#x2F;&#x2F;在这之前NTT与FFT无异    for (int mid &#x3D; 1; mid &lt; n; mid &lt;&lt;&#x3D; 1)    &#123;        &#x2F;&#x2F;单位原根g_n        int gn &#x3D; qp(type &#x3D;&#x3D; 1 ? g : gi, (mod - 1) &#x2F; (mid &lt;&lt; 1));        &#x2F;&#x2F;枚举具体区间，j也就是区间右端点        for (int R &#x3D; mid &lt;&lt; 1, j &#x3D; 0; j &lt; n; j +&#x3D; R)        &#123;            int g0 &#x3D; 1;            &#x2F;&#x2F;合并，记得要取模            for (int k &#x3D; 0; k &lt; mid; k++, g0 &#x3D; gn * g0 % mod)            &#123;                int x &#x3D; a[j + k], y &#x3D; g0 * a[mid + j + k] % mod;                a[j + k] &#x3D; (x + y) % mod;                a[j + k + mid] &#x3D; (x - y + mod) % mod;            &#125;        &#125;    &#125;&#125;</code></pre><p>可以发现，NTT和FFT代码大体逻辑是相同的！！！只是从单位根换成了原根</p><h3 id="6-2-tips"><a href="#6-2-tips" class="headerlink" title="6.2 tips"></a>6.2 tips</h3><p>在抽象代数中，原根就是循环群的生成元。这个概念只在模 $m$缩剩余系关于乘法形成的群中有“原根”这个名字，在一般的循环群中都称作“生成元”。</p><p>并非每个模$m$缩剩余系关于乘法形成的群都是循环群，存在原根就表明它同构于循环群，如果不存在原根就表明不同构。</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉格朗日插值法</title>
      <link href="/2022/07/10/la-ge-lang-ri-cha-zhi-fa/"/>
      <url>/2022/07/10/la-ge-lang-ri-cha-zhi-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-拉格朗日插值法的由来"><a href="#1-拉格朗日插值法的由来" class="headerlink" title="1.拉格朗日插值法的由来"></a>1.拉格朗日插值法的由来</h3><p>​        拉格朗日插值法究竟解决的是什么问题喃？</p><h4 id="问题：在二维图像上给出-n-个点，如何得到一个通过这-n-个点的一条线？"><a href="#问题：在二维图像上给出-n-个点，如何得到一个通过这-n-个点的一条线？" class="headerlink" title="问题：在二维图像上给出$n$个点，如何得到一个通过这$n$个点的一条线？"></a>问题：在二维图像上给出$n$个点，如何得到一个通过这$n$个点的一条线？</h4><p>​     例如：已知以下几个点$(0,1)、(1,0)、(2,1)$,问这条曲线是什么？</p><p><img src="/2022/07/10/la-ge-lang-ri-cha-zhi-fa/1.jpg" style="zoom:67%;"></p><p>显然易见对于这三个点，是可以用多项式画出这三个点的，因此我们可以假设这个二次多项式为</p><script type="math/tex; mode=display">y=a_0+a_1x+a_2x^2</script><p>我们带入这三个点$(x_1,y_1),(x_2,y_2),(x_3,y_3)$</p><p>可以得到以下方程组</p><script type="math/tex; mode=display">\begin{cases}y_1=a_0+a_1x_1+a_2x_1^2\\y_2=a_0+a_1x_2+a_2x_2^2\\y_3=a_0+a_1x_3+a_2x_3^2\\\end{cases}</script><p>对于这样一个方程组，我们可以用高斯消元解出系数。</p><p>但是拉格朗日是如何思考这个问题的喃？</p><h4 id="拉格朗日的思考："><a href="#拉格朗日的思考：" class="headerlink" title="拉格朗日的思考："></a>拉格朗日的思考：</h4><p>拉格朗日从另外的角度思考了这个问题，在他看来<code>可以通过三根二次曲线相加来达到目标</code>。那这是怎么的三根二次曲线呢？</p><p>这三根曲线只需满足一些条件即可：</p><script type="math/tex; mode=display">曲线1：y_1f_1(x)可以保证，在x_1点处，取值为y_1,其余两点取值为0\\曲线2：y_2f_1(x)可以保证，在x_2点处，取值为y_2,其余两点取值为0\\曲线3：y_3f_1(x)可以保证，在x_3点处，取值为y_3,其余两点取值为0</script><p>则所求曲线为：</p><script type="math/tex; mode=display">f(x)=y_1f_1(x)+y_2f_2(x)+y_3f_3(x)</script><p>而这样一条曲线正好可以过给的三个点</p><p><img src="/2022/07/10/la-ge-lang-ri-cha-zhi-fa/2.jpg" style="zoom:50%;"></p><h3 id="2、拉格朗日插值法的推导"><a href="#2、拉格朗日插值法的推导" class="headerlink" title="2、拉格朗日插值法的推导"></a>2、拉格朗日插值法的推导</h3><p>对于过每一个点$(x_i,y_i)$的曲线的函数设为$y_jf_i(x_j)$</p><p>因此需要满足的条件为：</p><script type="math/tex; mode=display">f_i(x_j)=\begin{cases}1,i=j\\0,i\neq j\end{cases}</script><p>因此我们最后构造出$f_i(x_j)$即可</p><p>显而易见，以下这个函数满足条件</p><script type="math/tex; mode=display">f_i(x)=\frac{(x-x_1)(x-x_2)...(x-x_n)}{(x_i-x_1)(x_i-x_2)...(x_i-x_n)}(i\neq j)</script><p>因此</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{n}y_if_i(x)=\sum_{i=1}^{n}y_i\Pi_{i\neq j}\frac{x-x_j}{x_i-x_j}</script><p>上模板题：<a href="https://www.luogu.com.cn/problem/P4781">https://www.luogu.com.cn/problem/P4781</a></p><pre class="language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;string.h&gt;using namespace std;#define int long longconst int maxn&#x3D;1e4+10;int x[maxn];int y[maxn];const int mod &#x3D;998244353;int qp(int x,int n)&#123;    int ans&#x3D;1;    while(n)&#123;        if(n&amp;1)&#123;            ans&#x3D;ans*x%mod;        &#125;        x&#x3D;x*x%mod;        n&gt;&gt;&#x3D;1;    &#125;    return ans;&#125;int inv(int x)&#123;    return qp(x,mod-2);&#125;int lagrange(int num,int n)&#123;    int ans&#x3D;0;    for(int k&#x3D;1;k&lt;&#x3D;n;k++)&#123;        int s1&#x3D;y[k];        int s2&#x3D;1;        for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;            if(i&#x3D;&#x3D;k)continue;            s1&#x3D;s1*(num-x[i])%mod;            s2&#x3D;s2*(x[k]-x[i])%mod;        &#125;        ans&#x3D;(ans+s1*inv(s2))%mod;    &#125;    ans&#x3D;(ans%mod+mod)%mod;    return ans;&#125;signed main()&#123;    int n,k;    cin&gt;&gt;n&gt;&gt;k;    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;        cin&gt;&gt;x[i]&gt;&gt;y[i];    &#125;    cout&lt;&lt;lagrange(k,n)&lt;&lt;endl;    return 0;&#125;</code></pre><p>当然这样的时间复杂度$O(n^2)$</p><p>在有些情况下不能做到最优，因此对于一些情况我们可以进行优化</p><h3 id="3、横坐标为连续的自然数（1-2-3…-）时，可以进行优化"><a href="#3、横坐标为连续的自然数（1-2-3…-）时，可以进行优化" class="headerlink" title="3、横坐标为连续的自然数（1,2,3….）时，可以进行优化"></a>3、横坐标为连续的自然数（1,2,3….）时，可以进行优化</h3><p>由于横坐标为连续的自然数:</p><p>故插值公式可以优化为：</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{n+1}y_i\frac{\Pi_{j=1}^{n+1}(x-j)}{(x-j)(-1)^{n+1-i}(i-1)!(n+1-i)!}</script><p>这样一来，可以通过预处理后缀积、前缀积然后代入这个式子，所以这种情况时间复杂度为$O(n)$</p><p>例题：求自然数的k次幂的和</p><script type="math/tex; mode=display">求\sum_{i=1}^{n}i^k\\思路：首先我们通过这个式子可以判断出这个式子最终一定是一个k+1次的多项式\\因此我们只需要k+2个点\\那么接下来如何设计这个函数喃？我们可以把所求看为f(n)=\sum_{i=1}^{n}i^k\\那么每一个点为(j,\sum_{i=1}^{j}i^k)\\因此我们预处理出k+2个点，然后将这k+2个点代入插值公式即可</script><p>相同题意的例题：<a href="https://codeforces.com/problemset/problem/622/F">https://codeforces.com/problemset/problem/622/F</a></p><p>代码：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;string.h&gt;#define int long longusing namespace std;const int maxn &#x3D; 1e6 + 10;const int mod &#x3D; 1e9 + 7;int x[maxn];int y[maxn];int qp(int a, int b)&#123;    int ans &#x3D; 1;    while (b)    &#123;        if (b &amp; 1)        &#123;            ans &#x3D; ans * a % mod;        &#125;        a &#x3D; a * a % mod;        b &gt;&gt;&#x3D; 1;    &#125;    return ans;&#125;int inv(int x)&#123;    return qp(x, mod - 2);&#125;int fac[maxn];void init_fac()&#123;    fac[0] &#x3D; 1;    fac[1] &#x3D; 1;    for (int i &#x3D; 2; i &lt; maxn - 5; i++)    &#123;        fac[i] &#x3D; fac[i - 1] * i % mod;    &#125;&#125;int back;int lagrange(int n, int k)&#123;    int ans &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; k + 2; i++)    &#123;        int s1 &#x3D; back * y[i] % mod;        int s2 &#x3D; ((k + 2 - i) % 2 &#x3D;&#x3D; 0 ? 1 : -1) * (n - i);        s2 &#x3D; s2 * fac[i - 1] % mod;        s2 &#x3D; s2 * fac[k + 2 - i] % mod;        ans &#x3D; (ans + s1 * inv(s2) % mod) % mod;    &#125;    ans &#x3D; (ans % mod + mod) % mod;    return ans;&#125;signed main()&#123;    ios::sync_with_stdio(false);    cin.tie(0);    cout.tie(0);    int n, k;    cin &gt;&gt; n &gt;&gt; k;    init_fac();    for (int i &#x3D; 1; i &lt;&#x3D; k + 2; i++)    &#123;        x[i] &#x3D; i;        y[i] &#x3D; (y[i - 1] + qp(i, k)) % mod;    &#125;    if (n &lt;&#x3D; k+2)    &#123;        cout &lt;&lt; y[n] &lt;&lt; endl;    &#125;    else    &#123;        back &#x3D; 1;        for (int j &#x3D; 1; j &lt;&#x3D; k + 2; j++)        &#123;            back &#x3D; back * (n - j) % mod;        &#125;        cout &lt;&lt; lagrange(n, k) &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容斥原理（二进制枚举实现）</title>
      <link href="/2022/06/21/rong-chi-yuan-li-er-jin-zhi-mei-ju/"/>
      <url>/2022/06/21/rong-chi-yuan-li-er-jin-zhi-mei-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="1、什么是容斥原理？"><a href="#1、什么是容斥原理？" class="headerlink" title="1、什么是容斥原理？"></a>1、什么是容斥原理？</h3><p>​        容斥原理是一种计数的方法：先不考虑重叠的情况，把包含于某内容中的所有对象的数目先计算出来，然后再把计数时重复计算的数目排斥出去，使得计算的结果既无遗漏又无重复，这种计数的方法称为容斥原理。</p><p>​        注：也可以将容斥定理描述为：要计算几个集合并集的大小，我们要先将所有<strong>单个集合</strong>的大小计算出来，然后减去所有<strong>两个集合相交</strong>的部分，再加回所有<strong>三个集合相交</strong>的部分，再减去所有<strong>四个集合相交</strong>的部分………依此类推，一直计算到<strong>所有集合相交</strong>的部分。（可以理解为就是先把所有单个集合全加一遍然后再去重）</p><p>​        为了直观的表达，可以采用韦恩图表示：</p><p><img src="/2022/06/21/rong-chi-yuan-li-er-jin-zhi-mei-ju/1.jpg" alt="集合A与集合B"></p><p>那么可以清晰的观察到：$A\cup B=A+B-A\cap B$</p><p>那么再增加一个集合C，结果又会怎么样喃？</p><p><img src="/2022/06/21/rong-chi-yuan-li-er-jin-zhi-mei-ju/2.jpg" alt="集合A、B、C"></p><p>同理我们可以得出以下结论：</p><p>$A\cup B\cup C=A+B+C-A\cap B-A\cap C-C\cap B +A\cup B\cup C$</p><p>………..</p><p>通过不断地增加集合的数量，最终可以得出容斥原理的一个重要公式。</p><h4 id="1-1、容斥原理公式"><a href="#1-1、容斥原理公式" class="headerlink" title="1.1、容斥原理公式"></a>1.1、容斥原理公式</h4><script type="math/tex; mode=display">|\cup_{i=1}^{n}A_i|=\sum_{i=1}^{n}|A_i|-\sum_{i,j:1\leq i\leq j\leq n}|A_i\cap A_j|+\sum_{i,j,k:1\leq i\leq j\leq k\leq n}|A_i\cap A_j\cap A_k|-..+(-1)^{n-1}|A_1\cap ..\cap A_n|</script><h3 id="2、二进制枚举"><a href="#2、二进制枚举" class="headerlink" title="2、二进制枚举"></a>2、二进制枚举</h3><h4 id="2-1、前提定理："><a href="#2-1、前提定理：" class="headerlink" title="2.1、前提定理："></a>2.1、前提定理：</h4><p>​    含有N个元素的集合的一切子集的个数为$2^n$</p><script type="math/tex; mode=display">证明:\\含有0个元素的子集有：C_n^0 \\含有1个元素的子集有：C_n^1 \\含有2个元素的子集有：C_n^2 \\含有3个元素的子集有：C_n^3 \\....\\含有n个元素的子集有：C_n^n\\所以：一切子集的总个数为：C_n^0+C_n^1+....C_n^n\\由二项式定理可得\sum_{i=0}^{n}c_n^i=2^n</script><h4 id="2-2、如何枚举出N个元素的集合的所有子集？"><a href="#2-2、如何枚举出N个元素的集合的所有子集？" class="headerlink" title="2.2、如何枚举出N个元素的集合的所有子集？"></a>2.2、如何枚举出N个元素的集合的所有子集？</h4><p>利用二进制的特性，由于二进制是01字符串，故我们可以用二进制数的每一位表示某个集合是否被选中（1表示该集合被选中，0表示该集合没有被选中）</p><p>如以下的例子：</p><div class="table-container"><table><thead><tr><th>集合编号</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>二进制</td><td>1</td><td>0</td><td>1</td></tr><tr><td>状态</td><td>选</td><td>不选</td><td>选</td></tr></tbody></table></div><h4 id="2-3、原理"><a href="#2-3、原理" class="headerlink" title="2.3、原理"></a>2.3、原理</h4><p>由于我们已经知道$n$个元素的集合的子集一共有$2^n$个，而长度为n的二进制数表示的范围为$[0,2^{n}-1]$，在这个区间上正好有$2^n$个数，所以这每个数也正好可以表示每个集合。</p><p>例如：二进制011表示选择了2、3集合</p><h4 id="2-4、巧妙利用位运算实现代码"><a href="#2-4、巧妙利用位运算实现代码" class="headerlink" title="2.4、巧妙利用位运算实现代码"></a>2.4、巧妙利用位运算实现代码</h4><p>​    由于我们在进行操作时，是遍历二进制的十进制表示形式，如果我们将它转化为二进制再来枚举每一位，会非常麻烦。为了便于判断，因此采用先左移（&lt;&lt;）再进行位与运算符（&amp;）</p><p>​    1进行左移几位之后，将变成000100…00的形式；又因为&amp;运算是在同一位上同时为1才为1，所以进行&amp;运算后可以知道此时左移的位数上的集合是否被选中。</p><p>代码实现：</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;using namespace std;int main()&#123;    int n;    cin &gt;&gt; n;    for(int i &#x3D; 0; i &lt; (1&lt;&lt;n); i++) &#x2F;&#x2F;从0～2^n-1个状态    &#123;        for(int j &#x3D; 0; j &lt; n; j++) &#x2F;&#x2F;遍历二进制的每一位        &#123;            if(i &amp; (1 &lt;&lt; j))&#x2F;&#x2F;判断二进制第j位是否存在            &#123;                &#x2F;&#x2F;相关集合操作            &#125;        &#125;    &#125;    return 0;&#125;</code></pre><h3 id="3、二进制枚举实现容斥定理"><a href="#3、二进制枚举实现容斥定理" class="headerlink" title="3、二进制枚举实现容斥定理"></a>3、二进制枚举实现容斥定理</h3><p>我们已经知道容斥定理的公式：</p><script type="math/tex; mode=display">|\cup_{i=1}^{n}A_i|=\sum_{i=1}^{n}|A_i|-\sum_{i,j:1\leq i\leq j\leq n}|A_i\cap A_j|+\sum_{i,j,k:1\leq i\leq j\leq k\leq n}|A_i\cap A_j\cap A_k|-..+(-1)^{n-1}|A_1\cap ..\cap A_n|</script><p>观察这个容斥的式子可以发现，每个元素同样有是否被选中的性质，因此可以用二进制枚举。</p><p>首先枚举N个元素的集合的所有子集：</p><pre class="language-C++" data-language="C++"><code class="language-C++">for(int i&#x3D;1;i&lt;(1&lt;&lt;lena);i++)</code></pre><p>然后枚举每一位</p><pre class="language-C++" data-language="C++"><code class="language-C++">for (int j &#x3D; 0; j &lt; n; j++)</code></pre><p>由于容斥定理的式子中有子集中元素的数量这一重要的因子，因此我们要利用变量$cnt$记录此时该子集中元素的数量</p><pre class="language-C++" data-language="C++"><code class="language-C++">if ((1 &lt;&lt; j) &amp; i)&#123;                    tmp++;           lcm *&#x3D; a[j]; &#125;</code></pre><p>枚举完每一位后，我们需要将答案统计起来</p><p>此时通过容斥定理的式子可以发现，当子集中元素个数为偶数时为-;当元素个数为奇数时为+。</p><pre class="language-c++" data-language="c++"><code class="language-c++">if (tmp % 2 &#x3D;&#x3D; 1)    ans +&#x3D; n &#x2F; lcm; &#x2F;&#x2F;奇数是加 偶数是减else    ans -&#x3D; n &#x2F; lcm;</code></pre><p>例如：求n以内2、 3、 5、 7、 11的倍数有多少个？</p><p>完整代码：</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;math.h&gt;using namespace std;int a[] &#x3D; &#123;2, 3, 5, 7, 11&#125;;int main()&#123;    int n;    int lena &#x3D; 5;    int ans &#x3D; 0;    cin &gt;&gt; n;    for (int i &#x3D; 1; i &lt; (1 &lt;&lt; lena); i++)    &#123;        &#x2F;&#x2F;&#x2F;每个数都有2种状态 ，在或不在 ,意思是2，3，5，7，11的倍数或不是，        &#x2F;&#x2F;&#x2F;一共有2^5-1种可能        int tmp &#x3D; 0;        int lcm &#x3D; 1;        for (int j &#x3D; 0; j &lt; lena; j++)        &#123;            if ((1 &lt;&lt; j) &amp; i)            &#123;                &#x2F;&#x2F;&#x2F;选第j个b倍数子;与i的二进制的第j位比较，看是否为1，是则选中                tmp++;       &#x2F;&#x2F;标志变量计算i中1的个数，也就是倍数的个数                lcm *&#x3D; a[j]; &#x2F;&#x2F;&#x2F;相乘            &#125;        &#125;        if (tmp % 2 &#x3D;&#x3D; 1)            ans +&#x3D; n &#x2F; lcm; &#x2F;&#x2F;奇数是加 偶数是减        else            ans -&#x3D; n &#x2F; lcm;    &#125;    printf(&quot;%d\n&quot;, ans);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯反演</title>
      <link href="/2022/04/26/mo-bi-wu-si-fan-yan/"/>
      <url>/2022/04/26/mo-bi-wu-si-fan-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="反演"><a href="#反演" class="headerlink" title="反演"></a>反演</h3><p>​    举个例子：</p><script type="math/tex; mode=display">已知g(n)的前缀和f(n)=\sum_{i=1}^ng(i)，则可以通过f反求g =>g(n)=f(n)-f(n-1)</script><p>​    像这样的过程就是反演，换言之，就是一个函数$f$由$g$推导而来，已知$f$,求$g$</p><h3 id="1、提出一个问题"><a href="#1、提出一个问题" class="headerlink" title="1、提出一个问题"></a>1、提出一个问题</h3><p>​    </p><script type="math/tex; mode=display">已知g(n)的因数和f(n)=\sum_{d|n}g(d),如何通过f反求g</script><h4 id="1-1、先模拟出f"><a href="#1-1、先模拟出f" class="headerlink" title="1.1、先模拟出f"></a>1.1、先模拟出f</h4><script type="math/tex; mode=display">\begin{cases}f(1)=g(1)\\f(2)=g(1)+g(2)\\f(3)=g(1)+g(3)\\f(4)=g(1)+g(2)+g(4)\\f(5)=g(1)+g(5)\\f(6)=g(1)+g(2)+g(3)+g(6)\\f(7)=g(1)+g(7)\\.....\end{cases}</script><p>​            通过以上的等式，可以将相应的g求出：</p><script type="math/tex; mode=display">\begin{cases}g(1)=f(1)\\g(2)=f(2)-f(1)\\g(3)=f(3)-f(1)\\g(4)=f(4)-f(2)\\g(5)=f(5)-f(1)\\g(6)=f(6)-f(3)-f(2)+f(1)\\g(7)=f(7)-f(1)\\.....\end{cases}</script><p>​            通过这个模拟可以看出一丝小小的规律：</p><p>​            将$n$先改写成$p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}….p_k^{\alpha_k}$，然后代入$g(n)$,根据上面的模拟将$g(n)$展开</p><script type="math/tex; mode=display">g(n)=g(p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k})\\=f(p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k})-f(p_1^{\alpha_1-1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k})-f(p_1^{\alpha_1}p_2^{\alpha_2-1}p_3^{\alpha_3}....p_k^{\alpha_k})-f(p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3-1}....p_k^{\alpha_k})\\-f(p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k-1})\\+f(p_1^{\alpha_1-1}p_2^{\alpha_2-1}p_3^{\alpha_3}....p_k^{\alpha_k})+f(p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3-1}....p_k^{\alpha_k})+.....+f(.....p_{i}^{\alpha_i-1}....p_j^{\alpha_j-1}.....)</script><h4 id="1-2、浓缩展开式"><a href="#1-2、浓缩展开式" class="headerlink" title="1.2、浓缩展开式"></a>1.2、浓缩展开式</h4><p>​        我们通过上面的模拟可以确定最终反演的$g$，一定是长成上面那个复杂的等式的样子，但是这样一个等式不怎么好记，因此我们将上述展开式进行抽象：</p><script type="math/tex; mode=display">g(p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k})=\sum_{s\subseteq\{1,2,3,..k\}}(-1)^{|k|}f(p_1^{\alpha_1-i_1}p_2^{\alpha_2-i_2}p_3^{\alpha_3-i_3}....p_k^{\alpha_k-i_k})\\其中\begin{cases}i_j=1,j\in S\\i_j=0,其他\end{cases}</script><p>碰巧！！！在数论有这样一个函数——莫比乌斯函数$\mu$</p><h4 id="1-3、莫比乌斯函数"><a href="#1-3、莫比乌斯函数" class="headerlink" title="1.3、莫比乌斯函数"></a>1.3、莫比乌斯函数</h4><p>​    </p><script type="math/tex; mode=display">\mu(n)=\begin{cases}1,n=1\\(-1)^k,n=p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k}且\alpha_i=1\\0，其他\end{cases}</script><p>​            这个时候我们便可以将$(-1)^{|k|}$用$\mu（n）$进行替换</p><p>​            </p><script type="math/tex; mode=display">g(p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k})=\sum_{s\subseteq\{1,2,3,..k\}}\mu(p_1^{i_1}p_2^{i_2}p_3^{i_3}....p_k^{i_k}) f(p_1^{\alpha_1-i_1}p_2^{\alpha_2-i_2}p_3^{\alpha_3-i_3}....p_k^{\alpha_k-i_k})\\再化简：\\g(n)=\sum_{d|n}\mu(\frac{n}{d})f(d)</script><p>​            举个例子便可知道是否正确了：</p><p>​            </p><script type="math/tex; mode=display">例子：g(6)=\mu(1)f(6)+\mu(2)f(3)+\mu(3)f(2)+\mu(6)f(1)\\=f(6)-f(3)-f(2)+f(1)</script><h3 id="2、莫比乌斯反演"><a href="#2、莫比乌斯反演" class="headerlink" title="2、莫比乌斯反演"></a>2、莫比乌斯反演</h3><p>​    通过上述过程我们便证明了定理1：</p><h4 id="2-1、定理一："><a href="#2-1、定理一：" class="headerlink" title="2.1、定理一："></a>2.1、定理一：</h4><script type="math/tex; mode=display">已知g(n)的因数和f(n)=\sum_{d|n}g(d),则g(n)=\sum_{d|n}\mu(\frac{n}{d})f(d)</script><p>​    除此之外，还有一个常见的</p><h4 id="2-2、定理二："><a href="#2-2、定理二：" class="headerlink" title="2.2、定理二："></a>2.2、定理二：</h4><script type="math/tex; mode=display">有两个函数f,g,且存在正整数N，对于所有n>N,f(n)=g(n)=0,则:\\f(n)=\sum_{n|m,m\leq N}g(m)  \iff  g(n)=\sum_{n|m,m\leq N}\mu(\frac{m}{n})f(m)</script><p>​                证明的方式和定理一异曲同工。</p><h3 id="3、莫反好题："><a href="#3、莫反好题：" class="headerlink" title="3、莫反好题："></a>3、莫反好题：</h3><h4 id="3-1、牛客14648"><a href="#3-1、牛客14648" class="headerlink" title="3.1、牛客14648"></a>3.1、牛客14648</h4><p>题目连接：<a href="https://ac.nowcoder.com/acm/problem/14648">https://ac.nowcoder.com/acm/problem/14648</a></p><p>​                        </p><script type="math/tex; mode=display">题目大意：有两个序列a,b，问：有多少个序列<x,y>满足gcd(x,y)=1 且 a_{b_x}=b_{a_y}</script><script type="math/tex; mode=display">这道题的意思等价于求\sum_{1\leq x\leq n,1\leq y\leq n}[a_{b_x}=b_{a_y}][gcd(x,y)=1]\\那么设f(D)=\sum_{1\leq x\leq n,1\leq y\leq n}[a_{b_x}=b_{a_y}][gcd(x,y)=D]\\那么根据莫比乌斯反演定理二有：g(d)=\sum_{d|D}f(D)\\由于\begin{cases}D|x\\D|y\end{cases}\\所以有\begin{cases}d|x\\d|y\end{cases}\\所以g(d)=\sum_{d|x,d|y}[a_{b_x}=b_{a_y}]\\这样一来g函数就很好算（时间复杂度O(nlogn)），然后利用反演即可求出f函数\\由定理二可得 f(D)=\sum_{D|d,d\leq n}\mu(\frac{d}{D})g(d)\\由于我们所求为f(1)，因此将D=1代入即可\\所以f(1)=\sum_{1|d,d\leq n}\mu(d)g(d)\\然可以利用\mu函数是积性函数的特性将莫比乌斯函数打表打出来(时间复杂度O(n))\\所以最后的时间复杂度为O(nlogn+n)</script><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;vector&gt;#include &lt;string.h&gt;using namespace std;#define int long longconst int maxn &#x3D; 1e5 + 10;vector&lt;int&gt; primes;bool isnp[maxn];int mu[maxn];int a[maxn];int b[maxn];void EularMu(int n)&#x2F;&#x2F;求莫比乌斯函数&#123;    mu[1] &#x3D; 1;    for (int i &#x3D; 2; i &lt;&#x3D; n; i++)    &#123;        if (!isnp[i])        &#123;            primes.push_back(i);            mu[i] &#x3D; -1;        &#125;        for (auto p : primes)        &#123;            if (i * p &gt; n)                break;            isnp[p * i] &#x3D; 1;            if (i % p &#x3D;&#x3D; 0)            &#123;                mu[i*p]&#x3D;0;                break;            &#125;            mu[i * p] &#x3D; -mu[i] ;        &#125;    &#125;&#125;int num[maxn];int getg(int d, int n)&#x2F;&#x2F;求g函数&#123;    int ans &#x3D; 0;    for (int x &#x3D; d; x &lt;&#x3D; n; x +&#x3D; d)    &#123;        num[a[b[x]]]++;    &#125;    for (int y &#x3D; d; y &lt;&#x3D; n; y +&#x3D; d)    &#123;        ans +&#x3D; num[b[a[y]]];    &#125;    for (int x &#x3D; d; x &lt;&#x3D; n; x +&#x3D; d)    &#123;        num[a[b[x]]]--;    &#125;    return ans;&#125;signed main()&#123;    ios::sync_with_stdio(false);    cin.tie(0);    cout.tie(0);    EularMu(maxn);    int n;    cin &gt;&gt; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        cin &gt;&gt; a[i];    &#125;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        cin &gt;&gt; b[i];    &#125;    int ans &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        ans +&#x3D; mu[i] * getg(i, n);    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="3-2、AtCoder-Grand-Contest-038C"><a href="#3-2、AtCoder-Grand-Contest-038C" class="headerlink" title="3.2、AtCoder Grand Contest 038C"></a>3.2、AtCoder Grand Contest 038C</h4><p>题目连接：<a href="https://atcoder.jp/contests/agc038/tasks/agc038_c">https://atcoder.jp/contests/agc038/tasks/agc038_c</a></p><script type="math/tex; mode=display">给一个长度为 n的序列 a_0,a_1,a_2,...,a_{n−1}\\求∑_{i=0}^{n−2}∑_{j=i+1}^{n−1}lcm(a_i,a_j)\ mod\ 998244353</script><script type="math/tex; mode=display">解：首先利用和式的性质：\sum_{i=0}^{n-1}\sum_{j=0}^{n-1}a_{ij}=2\sum_{i=0}^{n-2}\sum_{j=i+1}^{n-1}a_{ij}+\sum_{i=0}^{n-1}a_{ii}\\这个性质可以想象成一个大矩阵a_{ij}求和，这个和式等价于<整个矩阵的和=右上角+左下角+对角线>\\∴∑_{i=0}^{n−2}∑_{j=i+1}^{n−1}lcm(a_i,a_j)=\frac{∑_{i=0}^{n−1}∑_{j=0}^{n−1}lcm(a_i,a_j)-\sum_{i=0}^{n-1}a_i}{2}\\由于\sum_{i=0}^{n-1}a_i很好算，所以这个问题等价于如何求∑_{i=0}^{n−1}∑_{j=0}^{n−1}lcm(a_i,a_j)\\又∵lcm(a_i,a_j)=\frac{a_i*a_j}{gcd(a_i,a_j)}\\∴∑_{i=0}^{n−1}∑_{j=0}^{n−1}lcm(a_i,a_j)=∑_{i=0}^{n−1}∑_{j=0}^{n−1}\frac{a_i*a_j}{gcd(a_i,a_j)}\\∴∑_{i=0}^{n−1}∑_{j=0}^{n−1}lcm(a_i,a_j)=\sum_{d=1}^{max(a_0,a_2..a_{n-1})}\frac{1}{d}∑_{i=0}^{n−1}∑_{j=0}^{n−1}a_i*a_j[gcd(a_i,a_j)=d]\\这样一来，这个问题感觉就变得套路化了！\\上套路：\\设f(d)=∑_{i=0}^{n−1}∑_{j=0}^{n−1}a_i*a_j[gcd(a_i,a_j)=d]\\做一个倍数和函数g\\则g(d)=\sum_{d|D}f(D)=\sum_{d|D}∑_{i=0}^{n−1}∑_{j=0}^{n−1}a_i*a_j[gcd(a_i,a_j)=D]\\∵D|a_i,D|a_j\\∴d|a_i,d|a_j\\∴g(d)=\sum_{d|D}∑_{i=0}^{n−1}a_i[d|a_i]∑_{j=0}^{n−1}a_j[d|a_j]\\∴g(d)=\sum_{d|D}(∑_{i=0}^{n−1}a_i[d|a_i])^2\\这样一来通过枚举d就可以在O((max(a_i))log(max(a_i)))的时间复杂度下通过打表打出g函数\\利用莫比乌斯反演定理二可得：\\f(d)=\sum_{d|D}\mu(\frac{D}{d})g(D)\\∴∑_{i=0}^{n−1}∑_{j=0}^{n−1}lcm(a_i,a_j)=\sum_{d=1}^{max(a_0,a_2..a_{n-1})}\frac{1}{d}\sum_{d|D}\mu(\frac{D}{d})g(D)\\∴∑_{i=0}^{n−2}∑_{j=i+1}^{n−1}lcm(a_i,a_j)=\frac{\sum_{d=1}^{max(a_0,a_2..a_{n-1})}\frac{1}{d}\sum_{d|D}\mu(\frac{D}{d})g(D)-\sum_{i=0}^{n-1}a_i}{2}\\积性函数\mu可以用欧拉筛在线性的时间o(n)内打表打出来，g函数也是在O(nlogn)的时间复杂度打表预处理\\同理最后这个\sum_{d=1}^{max(a_0,a_2..a_{n-1})}\frac{1}{d}\sum_{d|D}\mu(\frac{D}{d})g(D)也可以在o(nlogn)的时间复杂度求出来\\因此这个复杂的玩意儿可以在O(nlogn)的时间复杂度下解决！！！\\最后还需要注意一下，此题还有有一个取模的操作\\对于此题分数取模，最好预先打表处理逆元，用一个inv数组保存，不然会超时</script><p>下面贴上代码（加了注释）：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define int long longconst int maxn &#x3D; 1e6 + 10;const int mod &#x3D; 998244353;vector&lt;int&gt; primes;bool isnp[maxn];int mu[maxn];int a[maxn];int gf[maxn];int cnt[maxn];int inv[maxn];void Eular_mu(int n)&#x2F;&#x2F;欧拉筛求莫比乌斯函数&#123;    mu[1] &#x3D; 1;    for (int i &#x3D; 2; i &lt;&#x3D; n; i++)    &#123;        if (!isnp[i])        &#123;            primes.push_back(i);            mu[i] &#x3D; -1;        &#125;        for (auto p : primes)        &#123;            if (i * p &gt; n)                break;            isnp[i * p] &#x3D; 1;            if (i % p &#x3D;&#x3D; 0)            &#123;                mu[i * p] &#x3D; 0;                break;            &#125;            mu[i * p] &#x3D; -mu[i];        &#125;    &#125;&#125;int qp(int a, int x)&#x2F;&#x2F;用快速幂&#123;    int ans &#x3D; 1;    while (x)    &#123;        if (x &amp; 1)        &#123;            ans &#x3D; ans * a % mod;        &#125;        a &#x3D; a * a % mod;        x &gt;&gt;&#x3D; 1;    &#125;    return ans;&#125;signed main()&#123;    ios::sync_with_stdio(false);    cin.tie(0);    cout.tie(0);    int n;    cin &gt;&gt; n;    int maxx &#x3D; 0;    int sum &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i++)    &#123;        cin &gt;&gt; a[i];        maxx &#x3D; max(a[i], maxx);        sum +&#x3D; a[i];        cnt[a[i]]++;&#x2F;&#x2F;记录a[i]的数量    &#125;    Eular_mu(maxn);    for(int i&#x3D;1;i&lt;&#x3D;maxn;i++)&#123;&#x2F;&#x2F;快速幂套费马小定理初始化逆元        inv[i]&#x3D;qp(i,mod-2);    &#125;    for (int d &#x3D; 1; d &lt;&#x3D; maxx; d++)&#x2F;&#x2F;求g函数    &#123;        for (int i &#x3D; d; i &lt;&#x3D; maxx; i +&#x3D; d)        &#123;            gf[d] &#x3D; (gf[d] + i * cnt[i] % mod) % mod;&#x2F;&#x2F;由于是枚举d的倍数,如果符合条件一定存在a[i]和此时d的倍数相等，这个时候cnt的作用体现出来&#x2F;&#x2F;利用cnt便可以直接求和        &#125;        gf[d] &#x3D; gf[d] * gf[d] % mod;    &#125;    int ans &#x3D; 0;    for (int d &#x3D; 1; d &lt;&#x3D; maxx; d++)    &#123;        for (int i &#x3D; d; i &lt;&#x3D; maxx; i +&#x3D; d)        &#123;            ans &#x3D; (ans + mu[i &#x2F; d] * gf[i] %mod* inv[d] % mod) % mod;&#x2F;&#x2F;同理枚举d的倍数，原理和g函数相似，最后直接套推出来的公式        &#125;    &#125;    cout &lt;&lt; (ans - sum%mod+mod ) % mod * inv[2] % mod &lt;&lt; endl;&#x2F;&#x2F;sum容易吧mod爆了，一定要取模    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>积性函数</title>
      <link href="/2022/04/24/ji-xing-han-shu/"/>
      <url>/2022/04/24/ji-xing-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h3><p>概念：一个函数$f(x)$,满足存在一对$p$,$q$且$gcd(p,q)=1$,都有$f(pq)=f(p)f(q)$;那么这个函数就是积性函数</p><p>证明几个例子：</p><h4 id="1、-f-x-1"><a href="#1、-f-x-1" class="headerlink" title="1、$f(x)=1$"></a>1、$f(x)=1$</h4><script type="math/tex; mode=display">证明-----------------------------\\常值函数f(pq)=1=1×1=f(p)f(q)</script><h4 id="2、-f-x-x"><a href="#2、-f-x-x" class="headerlink" title="2、$f(x)=x$"></a>2、$f(x)=x$</h4><script type="math/tex; mode=display">证明-----------------------------\\f(pq)=pq=f(p)f(q)</script><h4 id="3、-f-x-x-1"><a href="#3、-f-x-x-1" class="headerlink" title="3、$f(x)=[x=1]$"></a>3、$f(x)=[x=1]$</h4><script type="math/tex; mode=display">证明-----------------------------\\当x=1，此时f（x）=1，否则f（x）=0\\（一）当p或q为1时，f(pq)=f(q)或f(pq)=f(p)\\即此时，f(pq)=f(p)f(q)\\（二）当p和q都不为1时，f(pq)=0,f(q)=0,f(p)=0\\即此时，f(pq)=0=f(p)f(q)</script><h4 id="4、-f-n-n-1-frac-1-p-1-1-frac-1-p-2-…-1-frac-1-p-i-（欧拉函数：1…n中与n互质的数的数量）"><a href="#4、-f-n-n-1-frac-1-p-1-1-frac-1-p-2-…-1-frac-1-p-i-（欧拉函数：1…n中与n互质的数的数量）" class="headerlink" title="4、$f(n)=n(1-\frac{1}{p_1})(1-\frac{1}{p_2})…(1-\frac{1}{p_i})$ （欧拉函数：1…n中与n互质的数的数量）"></a>4、$f(n)=n<em>(1-\frac{1}{p_1})</em>(1-\frac{1}{p_2})…(1-\frac{1}{p_i})$ （欧拉函数：1…n中与n互质的数的数量）</h4><script type="math/tex; mode=display">证明---------------------------\\由唯一分解定理(p_i,q_i表示)质数可得\\p=p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k}\\q=q_1^{\alpha_1}q_2^{\alpha_2}q_3^{\alpha_3}....q_k^{\alpha_k}\\又∵gcd（p，q）=1\\∴p_i与q_i不相等\\∴qp=p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k}*q_1^{\alpha_1}q_2^{\alpha_2}q_3^{\alpha_3}....q_k^{\alpha_k}\\∴f(qp)=qp*(1-\frac{1}{p_1})*(1-\frac{1}{p_2})...(1-\frac{1}{p_i})*(1-\frac{1}{q_1})*(1-\frac{1}{q_2})...(1-\frac{1}{q_i})=f(q)f(p)</script><h4 id="5、-f-n-n的正因子的数量"><a href="#5、-f-n-n的正因子的数量" class="headerlink" title="5、$f(n)=n的正因子的数量$"></a>5、$f(n)=n的正因子的数量$</h4><script type="math/tex; mode=display">证明---------------------------\\由唯一分解定理(p_i,q_i表示)质数可得\\p=p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}....p_k^{\alpha_k}\\q=q_1^{\alpha_1}q_2^{\alpha_2}q_3^{\alpha_3}....q_k^{\alpha_k}\\又∵gcd（p，q）=1\\∴p_i与q_i不相等\\pq的正因子的数量=p的正因子的数量*q的正因子的数量（排列组合）\\即f（pq）=f（q）*f(p)</script><h4 id="命题：如果-f-n-g-n-为积性函数，则-h-n-f-n-g-n-也是积性函数"><a href="#命题：如果-f-n-g-n-为积性函数，则-h-n-f-n-g-n-也是积性函数" class="headerlink" title="命题：如果$f(n),g(n)$为积性函数，则$h(n)=f(n)*g(n)$也是积性函数"></a>命题：如果$f(n),g(n)$为积性函数，则$h(n)=f(n)*g(n)$也是积性函数</h4><h3 id="如何计算积性函数？"><a href="#如何计算积性函数？" class="headerlink" title="如何计算积性函数？"></a>如何计算积性函数？</h3><h4 id="（1）计算单点积性函数"><a href="#（1）计算单点积性函数" class="headerlink" title="（1）计算单点积性函数"></a>（1）计算单点积性函数</h4><p>设$f$为积性函数，假设$p=p_1^{\alpha_1}p_2^{\alpha_2}p_3^{\alpha_3}….p_k^{\alpha_k}$</p><p>则 $f(p)=f(p_1^{\alpha_1})f(p_2^{\alpha_2})f(p_3^{\alpha_3})….f(p_k^{\alpha_k})$</p><p>那么我可以类似质因数分解的方式来求解积性函数，大问题转化为小问题</p><pre class="language-C++" data-language="C++"><code class="language-C++">int get_f(int n)&#123;    int ans&#x3D;1;    for(int i&#x3D;2;i&lt;&#x3D;n&#x2F;i;i++)    &#123;        int cnt&#x3D;0;        while(n%i&#x3D;&#x3D;0)&#123;            cnt++;            n&#x2F;&#x3D;i;        &#125;        ans*&#x3D;f(i,cnt);    &#125;    if(n&gt;1)ans*&#x3D;f(n,1);    return ans;&#125;</code></pre><h4 id="（2）欧拉筛求一连串的积性函数"><a href="#（2）欧拉筛求一连串的积性函数" class="headerlink" title="（2）欧拉筛求一连串的积性函数"></a>（2）欧拉筛求一连串的积性函数</h4><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>求正整数 n的所有正因数的个数，q次询问。</p><h5 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h5><pre class="language-none"><code class="language-none">第一行一个正整数 q (1≤q≤10e5) 。第二行到第 q+1行，每行一个正整数 n (1≤n≤10e7)。</code></pre><h5 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h5><pre class="language-none"><code class="language-none">对于每个询问，输出一个正整数。两个答案间用空行分隔。</code></pre><p>数据很大，直接上唯一分解定理时间复杂度为$O(q\sqrt{n})$,OJ评测机稍微不好直接寄 ！！！因此直接上直接上欧拉筛筛积性函数，时间复杂度$O(n)$ </p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;const int maxn &#x3D; 1e7 + 10;int f[maxn];int cnt[maxn];&#x2F;&#x2F;维护素数数量int tot;&#x2F;&#x2F;素数数量bool not_prime[maxn];&#x2F;&#x2F;判断是否为素数int p[maxn];&#x2F;&#x2F;素数表int cal_f(int p, int a)&#x2F;&#x2F;计算p^a有多少个正因子，直接排列组合&#123;    return a+1;&#125;void Eular()&#123;    f[1] &#x3D; 1;    for (int i &#x3D; 2; i &lt;&#x3D; maxn; i++)    &#123;        if (!not_prime[i])        &#123;            p[++tot] &#x3D; i;            f[i] &#x3D; cal_f(i, 1);            cnt[i]&#x3D;1;&#x2F;&#x2F;初始的当前素数为1        &#125;        for (int j &#x3D; 1; j &lt;&#x3D; tot &amp;&amp; i * p[j] &lt;&#x3D; maxn; j++)        &#123;            not_prime[i * p[j]] &#x3D; 1;            if (i % p[j] &#x3D;&#x3D; 0)            &#123;                cnt[i * p[j]] &#x3D; cnt[i] + 1;                f[i * p[j]] &#x3D; f[i] &#x2F; cal_f(p[j], cnt[i]) * cal_f(p[j], cnt[i] + 1);                break;            &#125;            cnt[i * p[j]] &#x3D; 1;            f[i * p[j]] &#x3D; f[i]*cal_f(p[j],1);        &#125;    &#125;&#125;int main()&#123;    Eular();    int q;    cin &gt;&gt; q;    while (q--)    &#123;        int n;        cin &gt;&gt; n;        cout&lt;&lt;f[n]&lt;&lt;endl;    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot前后端分离（后端初体验）</title>
      <link href="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/"/>
      <url>/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="1、初结构介绍"><a href="#1、初结构介绍" class="headerlink" title="1、初结构介绍"></a>1、初结构介绍</h3><p>​        由于学校安排工程实践，有幸在大致学习了Spring-&gt;SpringMvc-&gt;Springboot基础玩意儿后，第一次基于Springboot裸敲前后端分离项目———装备管理系统（Arms）【感觉过于中二的系统，毕竟谁没事用这个系统啊！！！】，不过通过这个项目的实践，可以初体验前后端分离项目的逻辑，在这样一个小组中，有幸参与了后端的构建，感谢组员建立的数据库。</p><p>​        不过前端尚未结束，很多测试尚未完成，待完成后，将源码上传至github【网址：（尚未结束，于是暂无）】，希望大佬们直接在这个开源项目上魔改~(<em>^ ▽ ^ </em>）~</p><p>​        怎么说喃？后端主要写了一些接口，那么这些接口如何被前端调用？这篇文章也许会帮助你</p><h3 id="2、打包jar并运行jar"><a href="#2、打包jar并运行jar" class="headerlink" title="2、打包jar并运行jar"></a>2、打包jar并运行jar</h3><p>​    这么说吧，打包jar的原因，主要在于避免后端碰源码以及配环境等稍微复杂的后端操作，因此前端只需要通过后端提供的接口拿到想要的数据或者将前端的表单中的数据传输到后端！</p><h4 id="2-1、打包jar"><a href="#2-1、打包jar" class="headerlink" title="2.1、打包jar"></a>2.1、打包jar</h4><p><img src="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/1.png" alt></p><p>点开idea中的maven控制，点击package便可以打包jar</p><h4 id="2-2、运行jar"><a href="#2-2、运行jar" class="headerlink" title="2.2、运行jar"></a>2.2、运行jar</h4><p>打包好的jar会在target文件夹中</p><p><img src="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/2.png" alt></p><p>打开这个文件夹，按住shift键再点击鼠标右键，再点击在此位置打开powershell窗口</p><p><img src="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/3.png" alt></p><p>输入命令：<code>java -jar [jar文件地址]</code></p><p><img src="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/4.png" alt></p><p>回车运行：</p><p>如果成功会出现如下所示：</p><p><img src="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/5.png" alt></p><p>这样表示后端启动成功！！！</p><p>注意，端口在哪儿，从powershell中查看：</p><p><img src="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/6.png" alt></p><p>可以看到它写的：tomcat在8080端口运行成功</p><h3 id="3、浏览器访问localhost-8080"><a href="#3、浏览器访问localhost-8080" class="headerlink" title="3、浏览器访问localhost:8080"></a>3、浏览器访问localhost:8080</h3><p><img src="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/7.png" alt></p><p>可以发现成功了，由于我没写前端index页面所以目前没有页面，但是可以通过浏览器url地址发送请求</p><h4 id="3-1、发送请求："><a href="#3-1、发送请求：" class="headerlink" title="3.1、发送请求："></a>3.1、发送请求：</h4><p>查看接口文档</p><p><img src="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/8.png" alt></p><p>在地址栏输入请求：</p><p><img src="/2022/04/22/springboot-qian-hou-duan-chu-ti-yan/9.png" alt></p><p>很不错！！！</p><p>通过接口成功拿到了json数据，这样前端便可以将内容展示出来了！！！</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不定方程解的数量</title>
      <link href="/2022/04/21/bu-ding-fang-cheng-jie-de-shu-liang/"/>
      <url>/2022/04/21/bu-ding-fang-cheng-jie-de-shu-liang/</url>
      
        <content type="html"><![CDATA[<p>​    (公式加载较慢，多刷新一下)</p><h4 id="抛出问题："><a href="#抛出问题：" class="headerlink" title="抛出问题："></a>抛出问题：</h4><script type="math/tex; mode=display">求不定方程 x_1+x_2+x_3+......x_k=n的解的数量，且x_i\ge1，（1\le i\le k）</script><h4 id="1、隔板法"><a href="#1、隔板法" class="headerlink" title="1、隔板法"></a>1、隔板法</h4><p>​    将$n$看成$n$个球，$k$个解表示最终拆成了$k$份</p><p>​    那么问题等价于：用$k-1$个板将$n$个球隔开，$n$个球有$n-1$个缝隙，这$n-1$缝隙可以插入$k-1$个隔板，问：有多少种放法？</p><p>​    显然，有$C_{n-1}^{k-1}$种放法</p><p>​    此时，基本问题解决了</p><h4 id="2、将-x-i-ge-1-改成-x-i-ge-a-i"><a href="#2、将-x-i-ge-1-改成-x-i-ge-a-i" class="headerlink" title="2、将$x_i\ge 1$改成$x_i\ge a_i$"></a>2、将$x_i\ge 1$改成$x_i\ge a_i$</h4><p>​    原问题变为：</p><p>​        </p><script type="math/tex; mode=display">\begin{cases}x_1+x_2+x_3+......x_k=n\\x_1\ge a_1\\x_2\ge a_2\\....\\x_n\ge a_n\end{cases}</script><p>我们只需要将问题转化为原来的子问题：</p><p>​    令$y_i=x_i-(a_i-1)$</p><p>​    此时：$y_i\ge 1$</p><p>那么此时：</p><script type="math/tex; mode=display">\begin{cases}y_1+y_2+y_3+.....y_k=x_1+x_2+..+x_k-(a_1+a_2+..+a_k)+k\\y_i\ge 1\end{cases}</script><p>化简一下：</p><script type="math/tex; mode=display">\begin{cases}y_1+y_2+y_3+.....y_k=n-\sum_{i=1}^{k}a_i+k\\y_i\ge 1\end{cases}</script><p>所以此时这种情况的解的数量为：</p><script type="math/tex; mode=display">C_{n-\sum_{i=1}^{k}a_i+k}^{k-1}</script><h4 id="3、再变形！-x-1-x-2-x-3-……x-k-le-n-的解的数量（其余条件不变，即-x-i-ge1，（1-le-i-le-k）-）"><a href="#3、再变形！-x-1-x-2-x-3-……x-k-le-n-的解的数量（其余条件不变，即-x-i-ge1，（1-le-i-le-k）-）" class="headerlink" title="3、再变形！$x_1+x_2+x_3+……x_k\le n$的解的数量（其余条件不变，即$x_i\ge1，（1\le i\le k）$）"></a>3、再变形！$x_1+x_2+x_3+……x_k\le n$的解的数量（其余条件不变，即$x_i\ge1，（1\le i\le k）$）</h4><p>引入一个变量$z$</p><p>​      使：$x_1+x_2+x_3+……x_k+z= n$,其中$z\ge 0$</p><h5 id="3-1、-z-0-时"><a href="#3-1、-z-0-时" class="headerlink" title="3.1、$z=0$时"></a>3.1、$z=0$时</h5><p>问题没有发生变化，此时的解法为：$C_{n-1}^{k-1}$</p><h5 id="3-2、-z-ge-1-时"><a href="#3-2、-z-ge-1-时" class="headerlink" title="3.2、$z\ge 1$时"></a>3.2、$z\ge 1$时</h5><p>此时的$z$相当于$x_{k+1}$，相当于在原问题上加一个解，</p><p>此时的解法为：</p><script type="math/tex; mode=display">C_{n-1}^{k}</script><p>所以最终的解的数量为：</p><script type="math/tex; mode=display">C_{n-1}^{k-1}+C_{n-1}^{k}</script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排列组合 </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC与Springboot相遇</title>
      <link href="/2022/04/11/springboot-jdbc/"/>
      <url>/2022/04/11/springboot-jdbc/</url>
      
        <content type="html"><![CDATA[<h3 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h3><p>先上个我的JDBC模版：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDB</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/db_student?useSSL=false"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  <span class="token class-name">String</span> pass <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"......MySQL load failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">".....MySQL load sucessfully! "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">".....Connecting to MySQL..............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Connection</span> connect <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">".....Creating statement.............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql2<span class="token punctuation">;</span>            sql2 <span class="token operator">=</span> <span class="token string">"create table workshop"</span> <span class="token operator">+</span>                    <span class="token string">"(id integer not null,"</span> <span class="token operator">+</span>                    <span class="token string">"place varchar(10))"</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数据库建表</span>            <span class="token class-name">String</span> sql3<span class="token punctuation">;</span><span class="token comment">//向数据库插入数据</span>            sql3 <span class="token operator">=</span> <span class="token string">"insert into test_db.workshop "</span> <span class="token operator">+</span> <span class="token string">"values(5,'pku')"</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql4<span class="token punctuation">;</span><span class="token comment">//数据库修改</span>            <span class="token class-name">String</span> modify<span class="token operator">=</span><span class="token string">"BUT"</span><span class="token punctuation">;</span>            sql4<span class="token operator">=</span><span class="token string">"update workshop "</span><span class="token operator">+</span>            <span class="token string">"set place='"</span><span class="token operator">+</span>modify<span class="token operator">+</span><span class="token string">"' where id=4"</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql4<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql5<span class="token punctuation">;</span><span class="token comment">//数据库删除数据</span>            sql5<span class="token operator">=</span><span class="token string">"delete from workshop where id=5"</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql1<span class="token punctuation">;</span><span class="token comment">// 查询语句</span>            sql1 <span class="token operator">=</span> <span class="token string">"select * from test_db.workshop"</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID:"</span> <span class="token operator">+</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">'\t'</span> <span class="token operator">+</span> <span class="token string">"place:"</span> <span class="token operator">+</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"place"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">String</span> sql6<span class="token punctuation">;</span><span class="token comment">//where条件查询</span>            sql6<span class="token operator">=</span><span class="token string">"select * from workshop where id>2"</span><span class="token punctuation">;</span>            rs<span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql6<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token char">'\t'</span><span class="token operator">+</span><span class="token string">"place:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"place"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">".............Mission Successed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">".............MySql connecte failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在原始java代码中，既要自己写连接，又要自己选择是预编译sql还是sql语句，当接入web之后，还要抓取request对象之内的；虽然搞清逻辑之后还是比较简单，但是在我看了Springboot框架中的MySQL支持和Springboot中的jdbc之后————封装之后居然这么简单！！！！！</p><h3 id="2、Springboot整合JDBC"><a href="#2、Springboot整合JDBC" class="headerlink" title="2、Springboot整合JDBC"></a>2、Springboot整合JDBC</h3><h4 id="2-1、IDEA添加mysql支持"><a href="#2-1、IDEA添加mysql支持" class="headerlink" title="2.1、IDEA添加mysql支持"></a>2.1、IDEA添加mysql支持</h4><p><img src="/2022/04/11/springboot-jdbc/1.jpg" alt></p><p><img src="/2022/04/11/springboot-jdbc/2.jpg" alt></p><p>务必加上JDBC API接口和MySQL Dirver，否则程序无法运行！！！</p><p>这样一来，聪明的Springboot会自动为我们配置好pom.xml文件：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2-2、在哪儿存放数据库连接账号？"><a href="#2-2、在哪儿存放数据库连接账号？" class="headerlink" title="2.2、在哪儿存放数据库连接账号？"></a>2.2、在哪儿存放数据库连接账号？</h4><p>Springboot项目创建好了之后，会自动生成<code>application.proproites</code>文件，这个文件可以放一些配置，通过源码可以发现，Springboot底层扫包时还会扫描以<code>.yml</code>的文件（同级目录下）。相比之下我更喜欢<code>.yml</code>文件。</p><p>配置yml（yaml一样）文件：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_student    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver</code></pre><p>连接数据库之后，在DataSource加上一个<code>@Autowired</code>注解，Spring会自动装配成这个个DataSource对象，相当于它被加载到了IOC容器中，之后直接从里面取值就行了。</p><h4 id="2-3、测试一下"><a href="#2-3、测试一下" class="headerlink" title="2.3、测试一下"></a>2.3、测试一下</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">DataApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//查看一下默认的数据源</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获得数据库连接</span>        <span class="token class-name">Connection</span> connection<span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>Connection connection= dataSource.getConnection();</code>便完成连接，然而这只是一种方法！！！</p><p>O(∩_∩)O哈哈~还封装了另外一个对象！！！</p><h4 id="2-4、JdbcTemplate"><a href="#2-4、JdbcTemplate" class="headerlink" title="2.4、JdbcTemplate"></a>2.4、JdbcTemplate</h4><p>Springboot中还有一个JdbcTemplate对象，这个玩意儿怎么说喃？我感觉更nb一点</p><p>直接上一个例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select * from t_course"</span><span class="token punctuation">;</span><span class="token class-name">List</span> list<span class="token operator">=</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果你要查询全部信息，两句话就完了！！！相比之下，比之前那个简单了不知道多少。将信息存入LIst即可</p><p>来看个完整的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fatzard<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> jdbcController <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment">//查询数据库的所有信息</span>    <span class="token comment">//没有实体类，获取数据库的东西------用map</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/userlist"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token function">userList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select * from t_course"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/addUser/&#123;a&#125;/&#123;b&#125;/&#123;c&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> a<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> b<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into db_student.t_user(N_USER_ID,VC_LOGIN_NAME,VC_PASSWORD) values("</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">",'"</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"','"</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">"')"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>你看还可以直接和前端进行请求，前端传入请求，直接就可以处理；利用restful风格的url地址还可以直接通过url地址请求就完成数据库的更新，相同地，什么数据库增删改查，稍微改一下就可以了！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用注解运行SpringMvc</title>
      <link href="/2022/04/09/li-yong-zhu-jie-yun-xing-springmvc/"/>
      <url>/2022/04/09/li-yong-zhu-jie-yun-xing-springmvc/</url>
      
        <content type="html"><![CDATA[<h3 id="1、一点小变化"><a href="#1、一点小变化" class="headerlink" title="1、一点小变化"></a>1、一点小变化</h3><p>注解实现SpringMvc可以说是简单了亿点点！！！</p><p>相同地，web.xml不变！</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--1.注册DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--启动级别-1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--></span>    <span class="token comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>不一样的地方在于Spring配置文件的改变！！！</p><p>首先我们一下之前的配置文件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--添加处理映射器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--添加处理器适配器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>我们添加了处理映射器和处理器适配器！！！</p><p>然而，现在我们用一句：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span></code></pre><p>完整的配置文件：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.fatzard.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 让Spring MVC不处理静态资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--    支持mvc注解驱动        在spring中一般采用@RequestMapping注解来完成映射关系        要想使@RequestMapping注解生效        必须向上下文中注册DefaultAnnotationHandlerMapping        和一个AnnotationMethodHandlerAdapter实例        这两个实例分别在类级别和方法级别处理。        而annotation-driven配置帮助我们自动完成上述两个实例的注入。     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 前缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- 后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="2、注解实现"><a href="#2、注解实现" class="headerlink" title="2、注解实现"></a>2、注解实现</h3><p>好了，进入注解环节：</p><p>用两个注解：</p><p><code>@Controller</code></p><p><code>@RequestMapping()</code></p><p><code>@Controller</code>标记这是个Controller；<code>@RequestMapping()</code>表示映射的位置，括号写浏览器请求；</p><p>Controller类实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fatzard<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"helloSpringMvc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个类里面，必须写一个String的方法，返回一个重定向或者转发的地址（String）</p><h3 id="3、SpringMvc中的重定向和转发"><a href="#3、SpringMvc中的重定向和转发" class="headerlink" title="3、SpringMvc中的重定向和转发"></a>3、SpringMvc中的重定向和转发</h3><h4 id="3-1、使用视图解析器"><a href="#3-1、使用视图解析器" class="headerlink" title="3.1、使用视图解析器"></a>3.1、使用视图解析器</h4><p>xml文件中如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 前缀 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 后缀 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>使用视图解析器其实本质就是将Controller类中返回的字符串拼接为一个地址，然后在进入该地址</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fatzard<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerTest2</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"COntrollerTest2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Test3</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"COntrollerTest2   test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-2、不使用视图解析器"><a href="#3-2、不使用视图解析器" class="headerlink" title="3.2、不使用视图解析器"></a>3.2、不使用视图解析器</h3><p>将xml文件中的视图解析器注释掉！</p><p>写一个ModelController类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fatzard<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/m1/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ModelTest1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/WEB-INF/jsp/test2.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/m1/t2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>直接返回字符串即可</p><p>加一个<code>forward</code>意味着转发！</p><p>加一个<code>redirect</code>意味着重定向！</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC原理</title>
      <link href="/2022/04/08/springmvc-yuan-li/"/>
      <url>/2022/04/08/springmvc-yuan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="1、什么是SpringMvc？"><a href="#1、什么是SpringMvc？" class="headerlink" title="1、什么是SpringMvc？"></a>1、什么是SpringMvc？</h3><p>​        粘贴一段来自百科的话：</p><p>​        Spring  MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合</p><h4 id="1-1、封装的玩意儿"><a href="#1-1、封装的玩意儿" class="headerlink" title="1.1、封装的玩意儿"></a>1.1、封装的玩意儿</h4><p>Springmvc的核心DispatchServlet,</p><p>看到这个后缀，我盲猜就是个Servlet，验证一波再说！！！        </p><p>打开IDEA，不断地点击他的父类</p><p>​        <img src="/2022/04/08/springmvc-yuan-li/3.jpg" alt></p><p><img src="/2022/04/08/springmvc-yuan-li/4.jpg" alt></p><p><img src="/2022/04/08/springmvc-yuan-li/5.jpg" alt></p><p><img src="/2022/04/08/springmvc-yuan-li/6.jpg" alt></p><p>看到没？？？？？</p><p>这是啥？？？这是啥？这不是某亮老师天天在哪儿说的HttpServlet？这不是web课上叫手写的玩意儿吗？</p><p>再继续往下点看看！</p><p><img src="/2022/04/08/springmvc-yuan-li/7.jpg" alt></p><p><img src="/2022/04/08/springmvc-yuan-li/8.jpg" alt></p><p>这玩意儿就是个继承了一堆爸爸的servlet的大变种！！！</p><h3 id="2、SpringMvc原理流程图"><a href="#2、SpringMvc原理流程图" class="headerlink" title="2、SpringMvc原理流程图"></a>2、SpringMvc原理流程图</h3><p>一段理解之后，我画了SpringMvc的流程图，如下：</p><p><img src="/2022/04/08/springmvc-yuan-li/1.jpg" alt></p><p>看着好复杂！</p><p>确实很复杂，我为什么要看着玩意儿的原理？不看原理瘆得慌，没错SpringMvc得到原理就如上图所示一样：</p><h4 id="2-1、SpringMvc请求流程："><a href="#2-1、SpringMvc请求流程：" class="headerlink" title="2.1、SpringMvc请求流程："></a>2.1、SpringMvc请求流程：</h4><ol><li><p>HTTP 请求：客户端向应用程序发起Http请求，到达DispatchServlet(Spring提供的前端控制器 ) ，所有的请求通过DispatchServlet进行分发。</p></li><li><p>寻找处理器： 在DiispatchServlet在将请求分发给Controller之前， 通过HandlerMapping，找到具体的Controller。</p></li><li><p>调用处理器：找寻到Controller，将请求提交给Controller，Controller需要为并发用户处理，需要Controller实现Controller接口。</p></li><li><p>调用业务处理服务：Controller会调用 业务处理 Service， 并返回ModelAndView，给到前端控制器，ModelAndView包含应用程序所需要的数据信息（Model）以及视图讯息（View）。</p></li><li><p>得到处理信息：DispatchServlet得到处理结果后，会查询一个或多个处理视图的映射， Viewresolver视图解析器</p></li><li><p>处理视图映射：找到ModelAndView所对应的视图 ，对Model数据进行渲染</p></li><li><p>模型数据传递到View层：通过对Model数据渲染得到View</p></li><li><p>HTTP响应</p><p>看着好**麻烦，学它干嘛呀！不如就用某亮老师讲的Servlet写。</p><p>嘿嘿，不过这玩意儿是框架O(∩_∩)O哈哈~</p><h4 id="2-2、SpringMvc真正需要程序员做的"><a href="#2-2、SpringMvc真正需要程序员做的" class="headerlink" title="2.2、SpringMvc真正需要程序员做的"></a>2.2、SpringMvc真正需要程序员做的</h4><p><img src="/2022/04/08/springmvc-yuan-li/2.jpg" alt></p></li></ol><p>真正需要做只有红框框所示，简直离大谱，这尼玛就是框架！！！</p><h3 id="3、跑一个不用注解的“hello-SpringMvc”程序"><a href="#3、跑一个不用注解的“hello-SpringMvc”程序" class="headerlink" title="3、跑一个不用注解的“hello SpringMvc”程序"></a>3、跑一个不用注解的“hello SpringMvc”程序</h3><p>导入SpringMvc的库依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringMvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>Springmvc-01-sevrlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>Springmvc-02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>Springmvc-03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>Springmvc-04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>在根目录下 /web/WEB-INF/web.xml配置xml文件：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--1.注册DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--启动级别-1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--></span>    <span class="token comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>配置springmvc-servlet.xml文件：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--添加处理映射器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--添加处理器适配器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView    1.获取了ModelAndView中的数据    2.解析ModelAndView的视图名字    3.拼接视图名字，找到对应的视图 /WEB-INF/jsp/hello.jsp    4.将数据渲染到这个视图上    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--前缀--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--后缀--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.fatzard.controller.HelloController<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--注：不导入jar包会报404error错误--></span></code></pre><p>写一个HelloController类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fatzard<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> modelAndView<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//业务代码</span>        <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">"helloSpringMvc"</span><span class="token punctuation">;</span>        <span class="token comment">//视图跳转</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>再来个测试页面：</p><p>在/web/WEB-INF目录下建一个jsp目录：</p><p>写一个hello.jsp作为测试页面：</p><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%--  Created by IntelliJ IDEA.  User: Fatzard  Date: 2022&#x2F;4&#x2F;7  Time: 19:17  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;hello&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;$&#123;msg&#125;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>ok，代码写完了！！！！</p><p>下面配置tomcat。</p><h4 id="3-1、踩了大坑！！！"><a href="#3-1、踩了大坑！！！" class="headerlink" title="3.1、踩了大坑！！！"></a>3.1、踩了大坑！！！</h4><p>1、IDEA用<code>jdk16+tomcat10</code>报错，改成<code>jdk+tomcat9</code>才解决</p><p>2、代码没问题，运行是报错404；结果是IDEA没有导包，于是得自己导jar包</p><h4 id="3-2、如何检查IDEA是否抽风没导包？"><a href="#3-2、如何检查IDEA是否抽风没导包？" class="headerlink" title="3.2、如何检查IDEA是否抽风没导包？"></a>3.2、如何检查IDEA是否抽风没导包？</h4><p><img src="/2022/04/08/springmvc-yuan-li/9.jpg" alt></p><p><img src="/2022/04/08/springmvc-yuan-li/10.jpg" alt></p><p>先看有没有lib这个包，没有的话，自己手动加包！</p><h4 id="3-3、run！"><a href="#3-3、run！" class="headerlink" title="3.3、run！"></a>3.3、run！</h4><p>tomcat运行成功！！！</p><p>在地址栏输入：hello</p><p><img src="/2022/04/08/springmvc-yuan-li/11,jpg.jpg" alt></p><p>跳转</p><p><img src="/2022/04/08/springmvc-yuan-li/12.jpg" alt></p><p>成功了！！！</p><p>下次试试注解版！</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用“矩阵”巧妙证明斐蜀定理</title>
      <link href="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/"/>
      <url>/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/</url>
      
        <content type="html"><![CDATA[<p>裴蜀定理，又称贝祖定理（Bézout’s lemma）。是一个关于最大公约数的定理。</p><p>其内容是：</p><script type="math/tex; mode=display">设a，b是不全为零的整数，则存在整数 x，y, 使得 ax+by=gcd（a，b）</script><p>那么如何证明这个定理喃？？？</p><p>闲来无事，不小心用矩阵巧妙证明了这个定理O(∩_∩)O哈哈~</p><p>下面请看证明：</p><script type="math/tex; mode=display">证明：将gcd（a，b）=gcd（b，a\ mod\ b）写成矩阵的形式，如下</script><p>这种递推式转换成矩阵的小技巧就是按照矩阵乘法来的，稍微观察便可以发现！！</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/1.png" width="30%"></p><p>将右边这一矩阵继续按照这种方式展开：</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/2.png" width="50%"></p><p>继续化简：</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/3.png" width="45%"></p><p>继续引入矩阵A：</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/4.png" width="45%"></p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/5.png" style="zoom:33%;"></p><p>然后通过矩阵的运算惊奇地发现：</p><p><img src="/2022/04/07/qiao-miao-zheng-ming-fei-shu-ding-li/6.png" width="25%"></p><p>这是什么？这是什么？这**不就是斐蜀定理吗？</p><script type="math/tex; mode=display">等价于证明了方程ax+by=gcd（a，b）必有特解</script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2022/04/07/kuai-su-mi/"/>
      <url>/2022/04/07/kuai-su-mi/</url>
      
        <content type="html"><![CDATA[<p>通常地，我们计算$a^x$是将$x$从1一直累乘到$x$，这样是最简单的计算方法，但是这种做法的时间复杂度是$o(n)$，一旦我们计算的幂次方较大或者计算次数较多的时候就会花费很长的时间；例如：计算$10^{100000000}$组类似$999^{100000000}$这样的计算式，你可能算一辈子都算不出来。</p><p>​        这个时候引入二进制对$a^x$进行优化：</p><p>​        考虑$a^{2x}$=$a^x×a^x$=$(a^x)$$^2$于是可以利用二进制表示分割成更小的一部分</p><p>​        例如：$9^{13}$=$9^{(1101)_2}$=$9^8$×$9^4$×$9^1$</p><p>​        因为$n$有$[log_2x]+1$个二进制位，因此当我们知道了 $a^1,a^2,a^4…a^{2^k}$后，我们只用计算$[log_2x]+1$次乘法就可以计算出$a^x$    </p><p>​        因此计算$a^x$只需要将$x$对应的二进制下的数位为1的整系数幂乘起来即可</p><p>​        即：$a^x$=$a^{(x_0x_1x_2..x_n)_2}$=$a^{x_02^{0}}$×$a^{x_12^{1}}$×$a^{x_22^{2}}$…….×$a^{x_n2^{n}}$</p><p>​        根据上式发现，原问题被转化成了形式相同的子问题的乘积，并且我们可以在常数时间内从 $2^i$         项推出$2^{i+1}$项。</p><p>​        通过二进制处理后时间复杂度降为$O(logn)$</p><p>​        下面是我的快速幂代码模版：</p><pre class="language-c++" data-language="c++"><code class="language-c++">long long fastpow(long long a, long long n) &#x2F;&#x2F;快速幂&#123;    long long ans &#x3D; 1;    while (n)    &#123;        if (n &amp; 1)        &#123;            ans *&#x3D; a;        &#125;        a *&#x3D; a;        n &gt;&gt;&#x3D; 1; &#x2F;&#x2F;位运算    &#125;    return ans;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂项模版</title>
      <link href="/2022/04/07/za-xiang-mo-ban/"/>
      <url>/2022/04/07/za-xiang-mo-ban/</url>
      
        <content type="html"><![CDATA[<h4 id="模拟退火："><a href="#模拟退火：" class="headerlink" title="模拟退火："></a>模拟退火：</h4><pre class="language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; SA算法伪代码：&#x2F;&#x2F; T：当前剩余时间&#x2F;&#x2F; T_min：日落时分，因为乘法永远无法使得T变为0，所以需要一个极小的数来代替0&#x2F;&#x2F; r：时间流逝速率&#x2F;&#x2F; dE：高度差&#x2F;&#x2F; now：当前所处位置&#x2F;&#x2F; next：随机选取的位置&#x2F;&#x2F; H(a)：a处的高度&#x2F;&#x2F; ans：当前最优解&#x2F;&#x2F;  while(T&gt;T_min)&#x2F;&#x2F;  &#123;&#x2F;&#x2F;      next&#x3D;randow();&#x2F;&#x2F;随机选取一个位置&#x2F;&#x2F;      dE&#x3D;H(now)-H(next);&#x2F;&#x2F;求取高度差&#x2F;&#x2F;      if(dE&lt;0) now&#x3D;next;&#x2F;&#x2F;如果更高，直接前往&#x2F;&#x2F;      else&#x2F;&#x2F;      &#123;&#x2F;&#x2F;          if(exp(-dE&#x2F;T)&gt;random(0,1)) now&#x3D;next;&#x2F;&#x2F;      &#125;&#x2F;&#x2F;否则看概率&#x2F;&#x2F;      ans&#x3D;max(ans,H(now));&#x2F;&#x2F;      T*&#x3D;r;&#x2F;&#x2F;时间流逝&#x2F;&#x2F;  &#125;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;time.h&gt;#include &lt;stdio.h&gt;using namespace std;const int maxn &#x3D; 1e3 + 10;struct node&#123;    double x, y;&#125; p[maxn];int n;double ans;double sumx, sumy;double mx, my;double dis(double x, double y)&#123;    double ans &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        ans +&#x3D; sqrt((x - p[i].x) * (x - p[i].x) + (y - p[i].y) * (y - p[i].y));    &#125;    return ans;&#125;void SA()&#123;    double nowx &#x3D; mx, nowy &#x3D; my;    double T &#x3D; 100000;    double T_min &#x3D; 1e-12;    double r &#x3D; 0.996;    while (T &gt; T_min)    &#123;        for (int i &#x3D; -1; i &lt;&#x3D; 1; i++)        &#123;            for (int j &#x3D; -1; j &lt;&#x3D; 1; j++)            &#123;                double nextx &#x3D; nowx + i * T;                double nexty &#x3D; nowy + j * T;                double nextans &#x3D; dis(nextx, nexty);                double delta &#x3D; nextans - ans;                if (delta &lt; 0)                &#123;                    ans &#x3D; nextans;                    nowx &#x3D; nextx;                    nowy &#x3D; nexty;                    mx &#x3D; nextx;                    my &#x3D; nexty;                &#125;                else if (exp(delta &#x2F; T) * RAND_MAX &gt; rand())                 &#123;                     nowx &#x3D; nextx;                     nowy &#x3D; nexty;                 &#125;            &#125;        &#125;        T *&#x3D; r;    &#125;&#125;void solve()&#123;    ans &#x3D; dis(mx, my);    &#x2F;&#x2F; cout &lt;&lt; (double)clock() &#x2F; CLOCKS_PER_SEC &lt;&lt; endl;    &#x2F;&#x2F; while ((double)clock() &#x2F; CLOCKS_PER_SEC &lt; 0.8)    &#x2F;&#x2F;     SA();    SA();    SA();&#125;signed main()&#123;    srand(0);    cin &gt;&gt; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        cin &gt;&gt; p[i].x &gt;&gt; p[i].y;        sumx +&#x3D; p[i].x;        sumy +&#x3D; p[i].y;    &#125;    mx &#x3D; sumx &#x2F; n;    my &#x3D; sumy &#x2F; n;    solve();    printf(&quot;%.0lf\n&quot;, ans);    return 0;&#125;</code></pre><h4 id="莫队："><a href="#莫队：" class="headerlink" title="莫队："></a>莫队：</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string.h&gt;#include &lt;cmath&gt;using namespace std;#define int long longconst int maxn &#x3D; 3e4 + 10;int sq;struct query&#123;    int l, r, id;    bool operator&lt;(const query &amp;other) const    &#123;        if (l &#x2F; sq !&#x3D; other.l &#x2F; sq)            return l &lt; other.l;        if (l &#x2F; sq &amp; 1)            return r &lt; other.r;        return r &gt; other.r;    &#125;&#125; q[maxn * 10];int a[maxn], ans[maxn * 10], cnt[maxn * 100];int l &#x3D; 1, r &#x3D; 0;int cur &#x3D; 0;void add(int p)&#123;    if (cnt[a[p]] &#x3D;&#x3D; 0)    &#123;        cur++;    &#125;    cnt[a[p]]++;&#125;void del(int p)&#123;    cnt[a[p]]--;    if (cnt[a[p]] &#x3D;&#x3D; 0)    &#123;        cur--;    &#125;&#125;signed main()&#123;    ios::sync_with_stdio(false);    cin.tie(0);    cout.tie(0);    int n;    cin &gt;&gt; n;    sq &#x3D; sqrt(n);    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        cin &gt;&gt; a[i];    &#125;    int Q;    cin &gt;&gt; Q;    for (int i &#x3D; 0; i &lt; Q; i++)    &#123;        cin &gt;&gt; q[i].l &gt;&gt; q[i].r;        q[i].id &#x3D; i;    &#125;    sort(q, q + Q);    for (int i &#x3D; 0; i &lt; Q; i++)    &#123;        while (l &gt; q[i].l)            add(--l);        while (r &lt; q[i].r)            add(++r);        while (l &lt; q[i].l)            del(l++);        while (r &gt; q[i].r)            del(r--);        ans[q[i].id] &#x3D; cur;    &#125;    for (int i &#x3D; 0; i &lt; Q; i++)    &#123;        cout &lt;&lt; ans[i] &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><h4 id="最小最大（二分）："><a href="#最小最大（二分）：" class="headerlink" title="最小最大（二分）："></a>最小最大（二分）：</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;const int maxn &#x3D; 1e5 + 10;int a[maxn];int n, c;bool judge(int d)&#123;    int last &#x3D; 1, k &#x3D; 1;    for (int i &#x3D; 2; i &lt;&#x3D; n; i++)    &#123;        if (a[i] - a[last] &gt;&#x3D; d)        &#123;            k++;            last &#x3D; i;        &#125;    &#125;    if (k &gt;&#x3D; c)        return true;    else        return false;&#125;int main()&#123;    cin &gt;&gt; n &gt;&gt; c;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        cin &gt;&gt; a[i];    &#125;    sort(a + 1, a + n + 1);    int left &#x3D; 0;    int right &#x3D; a[n];    int mid &#x3D; left + (right - left) &#x2F; 2;    while (left &lt;&#x3D; right)    &#123;        if (judge(mid))        &#123;            left &#x3D; mid + 1;        &#125;        else            right &#x3D; mid - 1;        mid &#x3D; left + (right - left) &#x2F; 2;    &#125;    cout &lt;&lt; right &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="波利亚计数："><a href="#波利亚计数：" class="headerlink" title="波利亚计数："></a>波利亚计数：</h4><p><img src="/2022/04/07/za-xiang-mo-ban/1.png" alt></p><p><img src="/2022/04/07/za-xiang-mo-ban/2.png" alt></p><p><img src="/2022/04/07/za-xiang-mo-ban/3.png" alt></p><p><img src="/2022/04/07/za-xiang-mo-ban/4.png" alt></p><p><img src="/2022/04/07/za-xiang-mo-ban/5.png" alt></p><p><img src="/2022/04/07/za-xiang-mo-ban/6.png" alt></p><p><img src="/2022/04/07/za-xiang-mo-ban/7.png" alt></p><p><img src="/2022/04/07/za-xiang-mo-ban/8.png" alt></p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string.h&gt;#include &lt;cmath&gt;using namespace std;#define ll long longll qp(ll a, ll x, ll mod)&#123;    ll ans &#x3D; 1;    while (x)    &#123;        if (x &amp; 1)        &#123;            ans &#x3D; (ans * a) % mod;        &#125;        a &#x3D; (a * a) % mod;        x &gt;&gt;&#x3D; 1;    &#125;    return ans;&#125;int euler_phi(int n)&#123;    int ans &#x3D; n;    for (int i &#x3D; 2; i * i &lt;&#x3D; n; i++)        if (n % i &#x3D;&#x3D; 0)        &#123;            ans &#x3D; ans &#x2F; i * (i - 1);            while (n % i &#x3D;&#x3D; 0)                n &#x2F;&#x3D; i;        &#125;    if (n &gt; 1)        ans &#x3D; ans &#x2F; n * (n - 1);    return ans;&#125;signed main()&#123;    int t;    cin &gt;&gt; t;    while (t--)    &#123;        int n, mod;        cin &gt;&gt; n &gt;&gt; mod;        int ans &#x3D; 0;        if (n &#x3D;&#x3D; 0)        &#123;            cout &lt;&lt; 0 &lt;&lt; endl;            continue;        &#125;        for (int i &#x3D; 1; i * i &lt;&#x3D; n; i++)        &#123;            if (n % i &#x3D;&#x3D; 0)            &#123;                if (i * i !&#x3D; n)                    ans &#x3D; (ans + (euler_phi(n &#x2F; i) % mod * qp(n, i - 1, mod)) % mod + euler_phi(i) % mod * qp(n, n &#x2F; i - 1, mod) % mod) % mod;                else                    ans &#x3D; (ans + (euler_phi(n &#x2F; i) % mod * qp(n, i - 1, mod)) % mod) % mod;            &#125;        &#125;        cout &lt;&lt; ans &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展欧几里得定理</title>
      <link href="/2022/04/07/kuo-zhan-ou-ji-li-de-suan-fa/"/>
      <url>/2022/04/07/kuo-zhan-ou-ji-li-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>现在我们已经知道了，方程ax+by=gcd（a，b） 的一组可行解一定有一组可行解，那么如何求解它喃？</p><p>而这个时候我们有一个方法可以帮助我们求解：</p><p>扩展欧几里得算法（Extended Euclidean algorithm, EXGCD），常用于求ax+by=gcd（a，b） 的一组可行解。</p><p>下面来看一下证明：</p><p>(没加载出来一定要多刷新一下，这渲染太慢了)</p><script type="math/tex; mode=display">设\begin{cases}ax1+by1=gcd(a,b)\\bx2+(a\ mod\ b)y2=gcd(b,a\ mod\ b)\end{cases}\\∵gcd(a,b)=gcd(b,a\ mod\ b);\\∴ax1+by1=gcd(b,a mod b)=bx2+(a\ mod\ b)y2;\\又∵a\ mod\ b=a-[\frac{a}{b}]*b\\\begin{aligned}∴bx2+(a\ mod\ b)y2&=bx2+(a-[\frac{a}{b}]*b)y2\\                             &=bx2+ay2-[\frac{a}{b}]*b*y2\\                             &=ay2+b(x2-[\frac{a}{b}]*y2)\\                             &=ax1+by1\\                           \end{aligned}\\                             由于对应项系数对应相等,所以 \\                             \begin{cases}                             x1=y2\\        y1=x2-[\frac{a}{b}]*y2\\        \end{cases}</script><p>那么将x2，y2 不断代入递归求解直至gcd 为 0为止<br>在这之前有 </p><script type="math/tex; mode=display">gcd*x+0*y=gcd</script><p>，故x=1，y=0，再反过来带回去迭代便可以求出一组可行解</p><p>代码实现：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int ex_gcd(int a,int b,int &amp;x,int &amp;y)&#x2F;&#x2F;扩展欧几里得求ax+by&#x3D;gcd（a，b）；&#123;if(!b)&#123;x&#x3D;1;        y&#x3D;0;return a;&#125;int gcd&#x3D;ex_gcd(b,a%b,y,x);y-&#x3D;a&#x2F;b*x;return gcd;&#125;int main()&#123;    int a,b,x,y;    cin&gt;&gt;a&gt;&gt;b;    int gcd&#x3D;ex_gcd(a,b,x,y);     printf(&quot;%dx+%dy&#x3D;%d\n&quot;,a,b,gcd);    cout&lt;&lt;&quot;x&#x3D;&quot;&lt;&lt;x&lt;&lt;&quot; y&#x3D;&quot;&lt;&lt;y&lt;&lt;endl;&#x2F;&#x2F;方程的特解，可由线性代数相关知识推出通解；    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧几里得算法的证明</title>
      <link href="/2022/04/07/ou-ji-li-de-suan-fa/"/>
      <url>/2022/04/07/ou-ji-li-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>欧几里得算法是用来求两个正整数最大公约数的算法。古希腊数学家欧几里得在其著作《The Elements》中最早描述了这种算法,所以被命名为欧几里得算法</p><p>计算公式如下所示</p><p>(hexo 中 math渲染较慢，稍微等一下，如果还是没出来，就刷新(<em>^▽^</em>))</p><script type="math/tex; mode=display">gcd(a,b) = gcd(b,a\ mod\ b)</script><script type="math/tex; mode=display">下面来证明gcd(a,b) = gcd(b,a\ mod\ b)</script><script type="math/tex; mode=display">证明：设a>b ,令a=kb+c，则c=a\ mod\ b\\       设d=gcd（a，b）\ 则有 a=pd，b=qd\\       故有：pd=kqd+c\ 则c=（p-kq）d\\       \begin{aligned}       ∴gcd（b，a\ mod\ b)&=gcd（b，c）\\                             &=gcd（qd，（p-kq)*d）\\                             &=d * gcd（q，p-kq）\\       \end{aligned}\\（反证法）下面来证明p与p-kq互质：\\       假设q与p-kq不互质，则有q=mt，p-kq=nt\\     ∴ q=mt，p=（km+n）t\\     ∴a=mtd，b=（km+n）td\\     ∴gcd（a，b）=td  与gcd（a，b）=d矛盾\\     ∴假设不成立\\     ∴q与p-kq互质\\     ∴gcd（b，a\ mod\ b）=d=gcd（a，b）</script><p>计算机计算这个相当地简单：</p><pre class="language-c++" data-language="c++"><code class="language-c++">int gcd(int a,int b)&#123;    return b&#x3D;&#x3D;0?a:gcd(b,a%b);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性同余方程的通解及最小正整数解</title>
      <link href="/2022/04/07/xian-xing-tong-yu-fang-cheng-zu-de-tong-jie-ji-zui-xiao-zheng-zheng-shu-jie/"/>
      <url>/2022/04/07/xian-xing-tong-yu-fang-cheng-zu-de-tong-jie-ji-zui-xiao-zheng-zheng-shu-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1、问题引入"><a href="#1、问题引入" class="headerlink" title="1、问题引入"></a>1、问题引入</h3><p>现在来说一个exgcd的应用：求解同余方程</p><p>问题：</p><script type="math/tex; mode=display">求同余方程3x≡1 (mod\ 10)的一个解</script><p>解：可将该同余方程改写成其等价形式，如下：</p><script type="math/tex; mode=display">3x+10y=1</script><p>这个问题的本质是什么？</p><p>就是</p><script type="math/tex; mode=display">求形如ax+by=c方程的一个特解</script><p>那么对于这种形式的方程如何进行求解喃？<br> 法一：暴力从-99999到9999999一个一个的试？</p><p>显然这种本办法是不行的，这个时候就要考虑exgcd</p><p>下面来看操作：</p><script type="math/tex; mode=display">已知exgcd的标准形式ax+by=gcd（a，b），\\那么可以将形如ax+by=c构造成标准形式：\\a*(\frac{x*gcd(a,b)}{c})+b*(\frac{y*gcd(a,b)}{c})=gcd（a，b）\\令X=\frac{x*gcd(a,b)}{c}，Y=\frac{y*gcd(a,b)}{c},则方程变为：aX+bY=gcd(a,b)\\又∵gcd(a,b),c都为已知数\\∴可以通过exgcd求出X后，通过反解得到x(如何求解可参考我的上一篇博客)\\注：由于是整数解，需要考虑是否能gcd是否整除c\\</script><h3 id="2、通解求法"><a href="#2、通解求法" class="headerlink" title="2、通解求法"></a>2、通解求法</h3><p>问题继续深入下去！！！！</p><p>如何</p><script type="math/tex; mode=display">求关于同余方程ax+by=c的一组通解</script><script type="math/tex; mode=display">解：根据前一个问题，我们已经得到了一组特解x_0,y_0\\      现在的问题转化为了根据特解求通解\\      设x_i,y_i与x_j,y_j为方程的两组解\\则有：\begin{cases}ax_i+bx_i=c  ①\\           ax_j+by_j=c  ②\\           \end{cases}           \\联立①②可得a（x_i-x_j）=b（y_j-y_i）\\两边同时除以gcd（a，b）那么得到A（x_i-x_j）=B（y_j-y_i）\\此时gcd（A，B）=1\\那么通过移项可以发现x_i-x_j=\frac{B*(y_j-y_i)}{A}\\由于等号两边都为整数\\故y_j-y_i=k*A，同理x_i-x_j=k*B=k*\frac{b}{gcd(a,b)} \\（说明x_i与x_j之间的差一定为\frac{b}{gcd(a,b)}的倍数）\\所以通解为：\begin{cases}x=x_0+k*\frac{b}{gcd(a,b)}\\                      y=y_0-k*\frac{a}{gcd(a,b)}\\                      \end{cases}\\            有了通解便可以推出x和y的最小正整数解\\</script><h3 id="3、例题："><a href="#3、例题：" class="headerlink" title="3、例题："></a>3、例题：</h3><p>题目来自（POJ-1061）：</p><p>题干：</p><p>两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。<br>我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。</p><p>标程：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;#define int long longint ex_gcd(int a, int b, int &amp;x, int &amp;y)&#123;    if (!b)    &#123;        x &#x3D; 1;        y &#x3D; 0;        return a;    &#125;    int gcd &#x3D; ex_gcd(b, a % b, y, x);    y -&#x3D; a &#x2F; b * x;    return gcd;&#125;signed main()&#123;    int x, y, m, n, l;    cin &gt;&gt; x &gt;&gt; y &gt;&gt; m &gt;&gt; n &gt;&gt; l;    int a &#x3D; -(m - n), b &#x3D; l;    int X0, Y0;    int gcd &#x3D; ex_gcd(a, b, X0, Y0);    if ((x - y) % gcd)        cout &lt;&lt; &quot;Impossible&quot; &lt;&lt; endl;    else    &#123;        X0 &#x3D; X0 * (x - y) &#x2F; gcd;        int s &#x3D; abs(b &#x2F; gcd);        cout &lt;&lt; (X0 % s + s) % s &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算几何模版</title>
      <link href="/2022/04/07/ji-suan-ji-he-mo-ban/"/>
      <url>/2022/04/07/ji-suan-ji-he-mo-ban/</url>
      
        <content type="html"><![CDATA[<h3 id="计算几何："><a href="#计算几何：" class="headerlink" title="计算几何："></a>计算几何：</h3><h4 id="极角排序："><a href="#极角排序：" class="headerlink" title="极角排序："></a>极角排序：</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;struct node&#123;    double x, y;&#125; a[55];&#x2F;&#x2F;计算叉积p0p1×p0p2int cross(node p0,node p1,node p2)&#123;    return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);&#125;&#x2F;&#x2F;计算p1p2的距离double dis(node p1,node p2)&#123;    return sqrt((double)(p2.x-p1.x)*(p2.x-p1.x)+(p2.y-p1.y)*(p2.y-p1.y));&#125;&#x2F;&#x2F;极角排序函数，角度相同则距离小的在前面bool cmp(node p1,node p2)&#123;    int tmp&#x3D;cross(a[0],p1,p2);    if(tmp&gt;0) return true;    else if(tmp&#x3D;&#x3D;0&amp;&amp;dis(a[0],p1)&lt;dis(a[0],p2)) return true;    else return false;&#125;int main()&#123;    int i &#x3D; 0;    while (scanf(&quot;%lf%lf&quot;, &amp;a[i].x, &amp;a[i].y) !&#x3D; EOF)    &#123;        i++;    &#125;    &#x2F;&#x2F;cout &lt;&lt; i &lt;&lt; endl;    sort(a + 1, a + i, cmp);    for (int k &#x3D; 0; k &lt; i; k++)    &#123;        printf(&quot;(%d,%d)\n&quot;, (int)a[k].x, (int)a[k].y);    &#125;    return 0;&#125;</code></pre><h4 id="凸包—Graham算法"><a href="#凸包—Graham算法" class="headerlink" title="凸包—Graham算法:"></a>凸包—Graham算法:</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;using namespace std;const int maxn &#x3D; 1e5 + 10;int n, tot;struct node&#123;    double x, y;&#125; a[maxn], p[maxn];double dis(node a, node b)&#123;    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));&#125;double x(node a, node b, node c)&#123;    return (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);&#125;bool cmp(node A, node B)&#123;    double pp &#x3D; x(A, B, a[1]);    if (pp &gt; 0)        return 1;    if (pp &lt; 0)        return 0;    return dis(a[1], A) &lt; dis(a[1], B);&#125;void graham()&#123;    int k &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        if (a[i].y &lt; a[k].y || (a[i].y &#x3D;&#x3D; a[k].y &amp;&amp; a[i].x &lt; a[k].x))            k &#x3D; i;    &#125;    swap(a[1], a[k]);    sort(a + 2, a + n + 1, cmp);    tot &#x3D; 2;    p[0] &#x3D; a[0];    p[1] &#x3D; a[1];    for (int i &#x3D; 2; i &lt;&#x3D; n; i++)    &#123;        while (tot &gt; 0 &amp;&amp; x(p[tot - 2], p[tot - 1], a[i]) &lt;&#x3D; 0)            tot--;        p[tot++] &#x3D; a[i];    &#125;    p[tot+1] &#x3D; a[1];&#125;int main()&#123;    cin &gt;&gt; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        cin &gt;&gt; a[i].x &gt;&gt; a[i].y;    &#125;    graham();    double ans &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; tot; i++)    &#123;        ans +&#x3D; dis(p[i], p[i + 1]);        cout &lt;&lt; ans &lt;&lt; endl;    &#125;    printf(&quot;%.2lf\n&quot;,ans);    return 0;&#125;</code></pre><h4 id="凸包—Andrew算法"><a href="#凸包—Andrew算法" class="headerlink" title="凸包—Andrew算法:"></a>凸包—Andrew算法:</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;cstdio&gt;#define ll long long#define INF 2147483647#define eps 1e-8using namespace std;double ans;ll n,top,st[100100];struct node&#123;double x,y;&#125;a[100100];inline bool cmp(node a,node b)&#123;return a.x&#x3D;&#x3D;b.x?a.y&lt;b.y:a.x&lt;b.x;&#125;inline double getk(ll i,ll j)&#123;if(fabs(a[j].x-a[i].x)&lt;eps) return INF;&#x2F;&#x2F;两个点横坐标相同则斜率为无限大return (a[j].y-a[i].y)*1.0&#x2F;(a[j].x-a[i].x);&#125;inline double sqr(double v)&#123;return v*v;&#125;inline double calc(ll i,ll j)&#123;return sqrt(sqr(a[i].x-a[j].x)+sqr(a[i].y-a[j].y));&#125;int main()&#123;scanf(&quot;%lld&quot;,&amp;n);for(ll i&#x3D;1; i&lt;&#x3D;n; i++) scanf(&quot;%lf %lf&quot;,&amp;a[i].x,&amp;a[i].y);sort(a+1,a+1+n,cmp);for(ll i&#x3D;1; i&lt;&#x3D;n; i++)&#123;st[++top]&#x3D;i;while(top&gt;&#x3D;3&amp;&amp;getk(st[top-2],st[top])&lt;getk(st[top-2],st[top-1])-eps)&#123;st[top-1]&#x3D;st[top];st[top--]&#x3D;0;&#x2F;&#x2F;栈中第二个元素出栈&#125;&#125;for(ll i&#x3D;1; i&lt;top; i++) ans+&#x3D;calc(st[i],st[i+1]);while(top) st[top--]&#x3D;0;    &#x2F;&#x2F;同理for(ll i&#x3D;n; i&gt;&#x3D;1; i--)&#123;st[++top]&#x3D;i;while(top&gt;&#x3D;3&amp;&amp;getk(st[top-2],st[top])&lt;getk(st[top-2],st[top-1])-eps)&#123;&#x2F;&#x2F;要求：栈中至少还有三个元素并且斜率符合要求st[top-1]&#x3D;st[top];st[top--]&#x3D;0;&#125;&#125;for(ll i&#x3D;1; i&lt;top; i++) ans+&#x3D;calc(st[i],st[i+1]);printf(&quot;%.2lf&quot;,ans);return 0;&#125;</code></pre><h4 id="离散化扫描线："><a href="#离散化扫描线：" class="headerlink" title="离散化扫描线："></a>离散化扫描线：</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string.h&gt;using namespace std;#define int long longconst int maxn &#x3D; 1e6 + 10;int rk[maxn];int v[maxn];struct tree&#123;    int left, right;    int cover;    int len;&#125; tr[maxn &lt;&lt; 3];struct L&#123;    int x;    int y1, y2;    int state;    bool operator&lt;(L other)    &#123;        return x &lt; other.x;    &#125;&#125; line[maxn];void pushup(int pos)&#123;    if (tr[pos].cover)        tr[pos].len &#x3D; v[tr[pos].right + 1] - v[tr[pos].left];    else        tr[pos].len &#x3D; tr[pos * 2].len + tr[pos * 2 + 1].len;&#125;void build(int pos, int left, int right)&#123;    tr[pos].left &#x3D; left;    tr[pos].right &#x3D; right;    if (left &#x3D;&#x3D; right)        return;    int mid &#x3D; left + (right - left) &#x2F; 2;    build(pos * 2, left, mid);    build(pos * 2 + 1, mid + 1, right);&#125;void update(int pos, int left, int right, int w)&#123;    if (left &lt;&#x3D; tr[pos].left &amp;&amp; tr[pos].right &lt;&#x3D; right)    &#123;        tr[pos].cover +&#x3D; w;        pushup(pos);        return;    &#125;    int mid &#x3D; tr[pos].left + (tr[pos].right - tr[pos].left) &#x2F; 2;    if (left &lt;&#x3D; mid)        update(pos * 2, left, right, w);    if (mid &lt; right)        update(pos * 2 + 1, left, right, w);    pushup(pos);&#125;signed main()&#123;    int n;    cin &gt;&gt; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        int a, b, c, d;        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;        line[i] &#x3D; (L)&#123;a, b, d, 1&#125;;        line[i + n] &#x3D; (L)&#123;c, b, d, -1&#125;;        rk[i] &#x3D; b;        rk[i + n] &#x3D; d;    &#125;    n *&#x3D; 2;    sort(rk + 1, rk + 1 + n);    int size &#x3D; unique(rk + 1, rk + n + 1) - rk - 1;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        int p1 &#x3D; lower_bound(rk + 1, rk + 1 + size, line[i].y1) - rk;        int p2 &#x3D; lower_bound(rk + 1, rk + 1 + size, line[i].y2) - rk;        v[p1] &#x3D; line[i].y1;        v[p2] &#x3D; line[i].y2;        line[i].y1 &#x3D; p1;        line[i].y2 &#x3D; p2;    &#125;    sort(line + 1, line + n + 1);    build(1, 1, n);    int ans &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        ans +&#x3D; tr[1].len * (line[i].x - line[i - 1].x);        update(1, line[i].y1, line[i].y2 - 1, line[i].state);    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="随机增量法（最小圆形覆盖）："><a href="#随机增量法（最小圆形覆盖）：" class="headerlink" title="随机增量法（最小圆形覆盖）："></a>随机增量法（最小圆形覆盖）：</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;random&gt;#include &lt;cmath&gt;using namespace std;const int maxn &#x3D; 1e6 + 10;struct no&#123;    double x, y;&#125; node[maxn];struct circle&#123;    double x, y, r;&#125;;circle get(no p1, no p2, no p3)&#123;    circle p;    double a1 &#x3D; p2.x - p1.x, b1 &#x3D; p2.y - p1.y;    double c1 &#x3D; (p2.x * p2.x - p1.x * p1.x + p2.y * p2.y - p1.y * p1.y) &#x2F; 2;    double a2 &#x3D; p3.x - p1.x, b2 &#x3D; p3.y - p1.y;    double c2 &#x3D; (p3.x * p3.x - p1.x * p1.x + p3.y * p3.y - p1.y * p1.y) &#x2F; 2;    p.x &#x3D; (c1 * b2 - c2 * b1) &#x2F; (a1 * b2 - a2 * b1);    p.y &#x3D; (a2 * c1 - a1 * c2) &#x2F; (b1 * a2 - b2 * a1);    p.r &#x3D; sqrt((p.x - p1.x) * (p.x - p1.x) + (p.y - p1.y) * (p.y - p1.y));    return p;&#125;double dis(no a, no b)&#123;    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));&#125;bool cheak(no p, circle a)&#123;    if (sqrt((p.x - a.x) * (p.x - a.x) + (p.y - a.y) * (p.y - a.y)) &lt;&#x3D; a.r)        return 1;    else        return 0;&#125;int main()&#123;    int n;    cin &gt;&gt; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        cin &gt;&gt; node[i].x &gt;&gt; node[i].y;    &#125;    random_shuffle(node + 1, node + n + 1);    circle p;    p.r &#x3D; 0, p.x &#x3D; node[1].x, p.y &#x3D; node[1].y;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        if (!cheak(node[i], p))        &#123;            p.r &#x3D; 0;            p.x &#x3D; node[i].x, p.y &#x3D; node[i].y;            for (int j &#x3D; 1; j &lt;&#x3D; i - 1; j++)            &#123;                if (!cheak(node[j], p))                &#123;                    p.r &#x3D; (dis(node[i], node[j])) &#x2F; 2;                    p.x &#x3D; (node[i].x + node[j].x) &#x2F; 2, p.y &#x3D; (node[i].y + node[j].y) &#x2F; 2;                    for (int k &#x3D; 1; k &lt;&#x3D; j - 1; k++)                    &#123;                        if (!cheak(node[k], p))                        &#123;                            p &#x3D; get(node[i], node[j], node[k]);                        &#125;                    &#125;                &#125;            &#125;        &#125;    &#125;    printf(&quot;%.2lf %.2lf %.2lf\n&quot;, p.x, p.y, p.r);    return 0;&#125;</code></pre><h4 id="旋转卡壳找最远点对："><a href="#旋转卡壳找最远点对：" class="headerlink" title="旋转卡壳找最远点对："></a>旋转卡壳找最远点对：</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;#define int long longconst int maxn&#x3D;1e6+10;int n, cnt; &#x2F;&#x2F; cnt 是凸包上点的数量struct node&#123;                     &#x2F;&#x2F;结构体，存储坐标系中的点    double x, y;      &#x2F;&#x2F;坐标&#125; d[maxn], s[maxn]; &#x2F;&#x2F; d 为原点集，s 为凸包上的点集double check(node p1, node p2, node p3, node p4)&#123; &#x2F;&#x2F;求叉积，也用于下面的 cmp 中    double x1 &#x3D; p2.x - p1.x;    double y1 &#x3D; p2.y - p1.y;    double x2 &#x3D; p4.x - p3.x;    double y2 &#x3D; p4.y - p3.y;    return x1 * y2 - x2 * y1;&#125;double dis(node l, node r)&#123; &#x2F;&#x2F;距离公式·平方和    return (r.x - l.x) * (r.x - l.x) + (r.y - l.y) * (r.y - l.y);&#125;bool cmp(node l, node r)&#123; &#x2F;&#x2F;按与最左下点的极角排序    double tmp &#x3D; check(d[1], l, d[1], r);    if (tmp &gt; 0)        return 1;    if (tmp &#x3D;&#x3D; 0 &amp;&amp; dis(d[1], l) &lt; dis(d[1], r))        return 1;    return 0;&#125;void graham()&#123;    s[1] &#x3D; d[1];                 &#x2F;&#x2F;这样处理下来的第一个点（最左下的点）必然在凸壳上    sort(d + 2, d + n + 1, cmp); &#x2F;&#x2F;排序    for (int i &#x3D; 2; i &lt;&#x3D; n; i++)    &#123;        while (cnt &gt; 1 &amp;&amp; check(s[cnt - 1], s[cnt], s[cnt], d[i]) &lt;&#x3D; 0)            cnt--; &#x2F;&#x2F;叉积小于等于 0 时退栈。        &#x2F;&#x2F;注意，小于等于 0，因为等于 0 时相当于存在共线，此时我们求直径就要考虑线上最远的点也就是端点，而不是线上的点。        cnt++;        s[cnt] &#x3D; d[i];    &#125;    s[++cnt] &#x3D; d[1]; &#x2F;&#x2F;最后一个点连接到第一个点上，让凸包形成闭环    &#x2F;&#x2F;凸包构建完毕&#125;double get_longest()&#123;    double ans &#x3D; 0;    int p &#x3D; 2;     &#x2F;&#x2F;开始根据边枚举凸壳上的点。我们从第二个点开始枚举。    s[0] &#x3D; s[cnt]; &#x2F;&#x2F;转一周会经过第 n 个点，我们接下来会通过取模避免这一点，但这里就要给s[0]赋值为s[cnt]    for (int i &#x3D; 0; i &lt;&#x3D; cnt; i++)    &#123;        while (check(s[p], s[i], s[p], s[i + 1]) &lt; check(s[p + 1], s[i], s[p + 1], s[i + 1]))            p &#x3D; (p + 1) % cnt;                                     &#x2F;&#x2F;枚举凸壳上的点，直到下一个点到边的长度比当前点到边的长度小        ans &#x3D; max(ans, max(dis(s[i], s[p]), dis(s[i + 1], s[p]))); &#x2F;&#x2F;更新答案    &#125;    return ans;&#125;signed main()&#123;    cin &gt;&gt; n;    node Exchange;           &#x2F;&#x2F;用于实现交换的工具点    cin &gt;&gt; d[1].x &gt;&gt; d[1].y; &#x2F;&#x2F;初始化第一个点    for (int i &#x3D; 2; i &lt;&#x3D; n; i++)    &#123;        cin &gt;&gt; d[i].x &gt;&gt; d[i].y;        if (d[i].y &lt; d[1].y)        &#123;                    &#x2F;&#x2F;如果当前点的y坐标小于第一个，我们就让它变成第一个            Exchange &#x3D; d[i]; &#x2F;&#x2F;注意上面的判断是 &lt; 而不是 &lt;&#x3D; ，因为我们还要保证第一个点是最左下的点            d[i] &#x3D; d[1];            d[1] &#x3D; Exchange;        &#125;    &#125;    graham();    double ans &#x3D; get_longest();&#x2F;&#x2F;旋转卡壳（平面最远点对）    printf(&quot;%.0lf&quot;, ans); &#x2F;&#x2F;输出答案    return 0;&#125;</code></pre><h4 id="旋转卡壳找最大矩形覆盖"><a href="#旋转卡壳找最大矩形覆盖" class="headerlink" title="旋转卡壳找最大矩形覆盖"></a>旋转卡壳找最大矩形覆盖</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;const double eps &#x3D; 1e-11;const double PI &#x3D; acos(-1);int dcmp(double x)&#123;    if (fabs(x) &lt; eps)        return 0;    return x &gt; 0 ? 1 : -1;&#125;struct Point&#123;    double x, y;    Point(double a &#x3D; 0, double b &#x3D; 0) : x(a), y(b) &#123;&#125;&#125;;typedef Point Vector;typedef vector&lt;Point&gt; Polygon;Vector operator+(const Vector &amp;a, const Vector &amp;b) &#123; return Vector(a.x + b.x, a.y + b.y); &#125;Vector operator-(const Vector &amp;a, const Vector &amp;b) &#123; return Vector(a.x - b.x, a.y - b.y); &#125;Vector operator*(const Vector &amp;a, double &amp;b) &#123; return Vector(a.x * b, a.y * b); &#125;Vector operator&#x2F;(const Vector &amp;a, double &amp;b) &#123; return Vector(a.x &#x2F; b, a.y &#x2F; b); &#125;bool operator&#x3D;&#x3D;(const Vector &amp;a, const Vector &amp;b) &#123; return !dcmp(a.x - b.x) &amp;&amp; !dcmp(a.y - b.y); &#125;bool operator&lt;(const Vector &amp;a, const Vector &amp;b) &#123; return a.x &lt; b.x || (a.x &#x3D;&#x3D; b.x &amp;&amp; a.y &lt; b.y); &#125;double Dot(const Vector &amp;a, const Vector &amp;b) &#123; return a.x * b.x + a.y * b.y; &#125;double Length(const Vector &amp;a) &#123; return sqrt(Dot(a, a)); &#125;double Length2(const Vector &amp;a) &#123; return Dot(a, a); &#125;double Cross(const Vector &amp;a, const Vector &amp;b) &#123; return a.x * b.y - a.y * b.x; &#125;double Angle(const Vector &amp;a, const Vector &amp;b) &#123; return acos(Dot(a, b) &#x2F; Length(a) &#x2F; Length(b)); &#125;Vector Rotate(Vector A, double rad) &#123; return Point(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad)); &#125;int ConvexHull(Point *P, int cnt, Point *res)&#123;    sort(P, P + cnt);    cnt &#x3D; unique(P, P + cnt) - P;    int m &#x3D; 0;    for (int i &#x3D; 0; i &lt; cnt; i++)    &#123;        while (m &gt; 1 &amp;&amp; Cross(res[m - 1] - res[m - 2], P[i] - res[m - 2]) &lt;&#x3D; 0)            m--;        res[m++] &#x3D; P[i];    &#125;    int k &#x3D; m;    for (int i &#x3D; cnt - 2; i &gt;&#x3D; 0; i--)    &#123;        while (m &gt; k &amp;&amp; Cross(res[m - 1] - res[m - 2], P[i] - res[m - 2]) &lt;&#x3D; 0)            m--;        res[m++] &#x3D; P[i];    &#125;    if (cnt &gt; 1)        m--;    return m;&#125;void GetMinRCarea(Point *P, int cnt, double &amp;S, double &amp;C)&#123;    S &#x3D; C &#x3D; 1e18;    int l &#x3D; 1, r &#x3D; 1, u &#x3D; 1;    for (int i &#x3D; 0; i &lt; cnt; i++)    &#123; &#x2F;&#x2F;枚举底边P[i]~P[i+1]        while (Cross(P[i + 1] - P[i], P[u + 1] - P[u]) &gt; eps)            u &#x3D; (u + 1) % cnt; &#x2F;&#x2F;找上边，夹角还能增加就向后找        while (Dot(P[i + 1] - P[i], P[r + 1] - P[r]) &gt; eps)            r &#x3D; (r + 1) % cnt; &#x2F;&#x2F;找右边，夹角还小于90°就继续找        if (i &#x3D;&#x3D; 0)            l &#x3D; (r + 1) % cnt;        while (Dot(P[i + 1] - P[i], P[l + 1] - P[l]) &lt; -eps)            l &#x3D; (l + 1) % cnt;                                                                  &#x2F;&#x2F;找左边，夹角还大于90°就继续找        double d &#x3D; Length(P[i + 1] - P[i]);                                                     &#x2F;&#x2F;底边长度        double a &#x3D; Cross(P[i + 1] - P[i], P[u] - P[i]) &#x2F; d;                                     &#x2F;&#x2F;叉积几何意义就是求向量组成的平行四边形面积，除以底边就是高        double b &#x3D; (Dot(P[r] - P[i], P[i + 1] - P[i]) - Dot(P[l] - P[i], P[i + 1] - P[i])) &#x2F; d; &#x2F;&#x2F;向左向右的投影和(点积几何意义：A*B &#x3D; |A||B|cosθ一个向量在另一个向量方向上的投影长度乘后者的长度)，所以最后还要除后者的长度。        S &#x3D; min(S, a * b);        C &#x3D; min(C, 2.0 * (a + b));    &#125;&#125;const int N &#x3D; 100005;Point P[N], R[N];int n;int main()&#123;    int t;    scanf(&quot;%d&quot;,&amp;t);    while (t--)    &#123;        scanf(&quot;%d&quot;,&amp;n);        for (int i &#x3D; 0; i &lt; n; i++)            scanf(&quot;%lf%lf&quot;, &amp;R[i].x, &amp;R[i].y);        int cnt &#x3D; ConvexHull(R, n, P);        P[cnt] &#x3D; P[0];        double S, C;        GetMinRCarea(P, cnt, S, C);        printf(&quot;%.2lf %.2lf\n&quot;, S, C);    &#125;    return 0;&#125;</code></pre><h4 id="PIck定理："><a href="#PIck定理：" class="headerlink" title="PIck定理："></a>PIck定理：</h4><p><img src="/2022/04/07/ji-suan-ji-he-mo-ban/1.png" alt></p><h4 id="平面最近点对："><a href="#平面最近点对：" class="headerlink" title="平面最近点对："></a>平面最近点对：</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;set&gt;const int N &#x3D; 200005;int n;double ans &#x3D; 1e20;struct point &#123;  double x, y;  point(double x &#x3D; 0, double y &#x3D; 0) : x(x), y(y) &#123;&#125;&#125;;struct cmp_x &#123;  bool operator()(const point &amp;a, const point &amp;b) const &#123;    return a.x &lt; b.x || (a.x &#x3D;&#x3D; b.x &amp;&amp; a.y &lt; b.y);  &#125;&#125;;struct cmp_y &#123;  bool operator()(const point &amp;a, const point &amp;b) const &#123; return a.y &lt; b.y; &#125;&#125;;inline void upd_ans(const point &amp;a, const point &amp;b) &#123;  double dist &#x3D; sqrt(pow((a.x - b.x), 2) + pow((a.y - b.y), 2));  if (ans &gt; dist) ans &#x3D; dist;&#125;point a[N];std::multiset&lt;point, cmp_y&gt; s;int main() &#123;  scanf(&quot;%d&quot;, &amp;n);  for (int i &#x3D; 0; i &lt; n; i++) scanf(&quot;%lf%lf&quot;, &amp;a[i].x, &amp;a[i].y);  std::sort(a, a + n, cmp_x());  for (int i &#x3D; 0, l &#x3D; 0; i &lt; n; i++) &#123;    while (l &lt; i &amp;&amp; a[i].x - a[l].x &gt;&#x3D; ans) s.erase(s.find(a[l++]));    for (auto it &#x3D; s.lower_bound(point(a[i].x, a[i].y - ans));         it !&#x3D; s.end() &amp;&amp; it-&gt;y - a[i].y &lt; ans; it++)      upd_ans(*it, a[i]);    s.insert(a[i]);  &#125;  printf(&quot;%.4lf&quot;, ans);  return 0;&#125;</code></pre><h4 id="平面最小正方形覆盖（三分）："><a href="#平面最小正方形覆盖（三分）：" class="headerlink" title="平面最小正方形覆盖（三分）："></a>平面最小正方形覆盖（三分）：</h4><pre class="language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#define INF 0x3f3f3f3f#define PI acos(-1.0)using namespace std;const double eps &#x3D;1e-12;const int maxn &#x3D; 50;struct Node&#123;int x;int y;&#125;a[maxn];int n;double C(double degree)&#123;double x,y,maxx,maxy,minx,miny;maxx &#x3D; maxy &#x3D; -INF;minx &#x3D; miny &#x3D; INF;for(int i&#x3D;0;i&lt;n;i++)&#123;x&#x3D;a[i].x*cos(degree)-a[i].y*sin(degree);y&#x3D;a[i].x*sin(degree)+a[i].y*cos(degree);maxx&#x3D;max(maxx,x);maxy&#x3D;max(maxy,y);minx&#x3D;min(minx,x);miny&#x3D;min(miny,y);&#125;return max(maxx-minx,maxy-miny);&#125;double bsearch()&#123;double left&#x3D;0,right&#x3D;PI&#x2F;2.0;double midl,midr;while(right-left&gt;eps)&#123;midl&#x3D;(left+right)&#x2F;2;midr&#x3D;(midl+right)&#x2F;2;if(C(midl)&lt;C(midr))&#123;right&#x3D;midr;&#125;else&#123;left&#x3D;midl;&#125;&#125;return C(left);&#125;int main()&#123;int T;cin&gt;&gt;T;while(T--)&#123;cin&gt;&gt;n;for(int i&#x3D;0;i&lt;n;i++)&#123;cin&gt;&gt;a[i].x&gt;&gt;a[i].y;&#125;double low &#x3D; bsearch();printf(&quot;%.2lf\n&quot;,low*low);&#125;return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP(2)-Spring实现AOP</title>
      <link href="/2022/04/06/spring-aop-2/"/>
      <url>/2022/04/06/spring-aop-2/</url>
      
        <content type="html"><![CDATA[<h3 id="利用Spring实现AOP"><a href="#利用Spring实现AOP" class="headerlink" title="利用Spring实现AOP"></a>利用Spring实现AOP</h3><p>首先写一个UserService接口：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>再写一个实现类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改了数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然后在XML文件注册bean：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pro.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>好！</p><p>现在我们假设我们的工程就如上所示，现在需要你增加一个日志功能（就是在执行该方法前输出执行了什么方法）</p><p>那么Spring是如何实现的喃？</p><h4 id="1、导入AOP依赖包"><a href="#1、导入AOP依赖包" class="headerlink" title="1、导入AOP依赖包"></a>1、导入AOP依赖包</h4><p>在XML文件中加入：</p><pre class="language-xml" data-language="xml"><code class="language-xml">xmlns:aop="http://www.springframework.org/schema/aop"http://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsd"></code></pre><p>完整的xml文件头部：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/aop       http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="2、利用Spring-API接口实现："><a href="#2、利用Spring-API接口实现：" class="headerlink" title="2、利用Spring-API接口实现："></a>2、利用Spring-API接口实现：</h3><h4 id="2-1、前置方法："><a href="#2-1、前置方法：" class="headerlink" title="2.1、前置方法："></a>2.1、前置方法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeforeLog</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//method 要执行的目标对象的方法</span>    <span class="token comment">//args 参数</span>    <span class="token comment">//target 目标对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的"</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-2、后置方法："><a href="#2-2、后置方法：" class="headerlink" title="2.2、后置方法："></a>2.2、后置方法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">AfterReturningAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterLog</span> <span class="token keyword">implements</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 返回了"</span><span class="token operator">+</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-3、在bean注册："><a href="#2-3、在bean注册：" class="headerlink" title="2.3、在bean注册："></a>2.3、在bean注册：</h4><pre class="language-xml" data-language="xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.log.BeforeLog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.log.AfterLog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    方法一：使用原生spring api接口--></span><span class="token comment">&lt;!--    配置aop--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        首先需要一个切入点 expression :表达式 execution 要执行的位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    执行环绕增加--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><p>现在万事大吉，进行测试：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationConetext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="3、利用自定义类实现："><a href="#3、利用自定义类实现：" class="headerlink" title="3、利用自定义类实现："></a>3、利用自定义类实现：</h3><p>先整一个自定义切入点：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiyPoint</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======方法执行前======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======方法执行后======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>同样地，再配置XML文件即可：</p><pre class="language-xml" data-language="xml"><code class="language-xml">    第二种方式 ：自定义类    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Diy.DiyPoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        自定义切面  ref为要引用的类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--            引入点--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--            通知--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h3 id="4、利用注解实现："><a href="#4、利用注解实现：" class="headerlink" title="4、利用注解实现："></a>4、利用注解实现：</h3><p>利用注解首先需要开启注解支持：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    利用注解的方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PointcutAnnotation<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Diy.PointcutAnnotation<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>接下来在com.Diy.PointcutAnnotation路径写我们的PointCutAnnotation类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">After</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token comment">//标注这个类是一个切面</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PointcutAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//传入的参数代表切入的点</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kuang.pro.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======方法执行前====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kuang.pro.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======方法执行后====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kuang.pro.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>同样测试可以通过！！！O(∩_∩)O哈哈~</p><p><img src="/2022/04/06/spring-aop-2/1.jpg" alt="测试"></p><p>美哉，下面开学SpringMVC！</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP(1)-JDK动态管理</title>
      <link href="/2022/04/05/spring-aop-1/"/>
      <url>/2022/04/05/spring-aop-1/</url>
      
        <content type="html"><![CDATA[<h3 id="1、什么是AOP？"><a href="#1、什么是AOP？" class="headerlink" title="1、什么是AOP？"></a>1、什么是AOP？</h3><p>​      用来自百科的话来说：</p><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/面向切面编程/6016335">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/预编译/3191547">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/函数式编程/4035031">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/耦合度/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><p>​            ！！！！！</p><p>​    换言之，什么意思喃？用简单的话来说，就是在不破坏原有代码的情况下，通过“代理”的这种模式来切入，从而达到实现在不改变原有代码情况下进行功能的增加、删减！</p><p>​    看下面这张图：</p><p><img src="/2022/04/05/spring-aop-1/1.jpg" alt="AOP"></p><p>如果一个开发是按照A-&gt;B-&gt;C-&gt;D这样的流程来的，现在你想添加一些功能，你会发现，如果要改变或者添加功能，代码量的改变将会非常之大！！！因为有可能一个类继承了一堆类，你如果改一个类，如果没处理好，那就会“寄”，而且改代码是非常痛苦的！！！！（打ACM调一个计算几何都非常痛苦，别说这一堆Java代码），所以出现了“代理”这种思想，这种思想采用代理的方式，将对象封装在一个代理对象中，通过代理的方式进行功能的增删！</p><h3 id="2、JDK动态代理"><a href="#2、JDK动态代理" class="headerlink" title="2、JDK动态代理"></a>2、JDK动态代理</h3><p><strong>JDK的动态代理需要了解两个类</strong></p><p>核心 : InvocationHandler   和   Proxy  ， 网上看JDK帮助文档吧O(∩_∩)O</p><p>模版：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>demo3<span class="token punctuation">.</span>pro</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//被代理的接口</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成得到的代理类</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理生成实例并返回代理结果</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> result<span class="token operator">=</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在测试中调用即可：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//真实角色</span>    <span class="token class-name">UserSeveImpl</span> userSeveimpl<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserSeveImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//代理角色</span>    <span class="token class-name">ProxyInvocationHandler</span> proxyInvocationHandler<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    proxyInvocationHandler<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>userSeveimpl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置要代理的对象</span>    <span class="token comment">//动态生成代理类</span>    <span class="token class-name">UserSeve</span> userSeve <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">UserSeve</span><span class="token punctuation">)</span> proxyInvocationHandler<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userSeve<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中Bean的作用域&amp;XML的自动装配(注解)</title>
      <link href="/2022/04/05/spring-zhong-bean-de-zuo-yong-yu-xml-zi-dong-zhuang-pei/"/>
      <url>/2022/04/05/spring-zhong-bean-de-zuo-yong-yu-xml-zi-dong-zhuang-pei/</url>
      
        <content type="html"><![CDATA[<h3 id="1、bean的作用域"><a href="#1、bean的作用域" class="headerlink" title="1、bean的作用域"></a>1、bean的作用域</h3><p>​    在XML文件中，bean对象后面加一个scope便可以知道这个bean的作用域，但是在Spring中默认为单例</p><h4 id="1-1、当scope-singleton时为单例"><a href="#1-1、当scope-singleton时为单例" class="headerlink" title="1.1、当scope=singleton时为单例"></a>1.1、当scope=singleton时为单例</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wang.pojo.MyBean<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="1-2、当scope-prototype时为多例"><a href="#1-2、当scope-prototype时为多例" class="headerlink" title="1.2、当scope=prototype时为多例"></a>1.2、当scope=prototype时为多例</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wang.pojo.MyBean<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>除此之外还有，<code>request</code>和<code>session</code>作用域。(<em>^▽^</em>)（还没学）</p><h4 id="1-3、bean的一个周期："><a href="#1-3、bean的一个周期：" class="headerlink" title="1.3、bean的一个周期："></a>1.3、bean的一个周期：</h4><p>底层的bean是如何执行？</p><ul><li>执行无参数的构造</li><li>执行set方法设置属性值</li><li>在初始化方法前添加前置处理器</li><li>执行初始化方法</li><li>在初始化方法后添加后置处理器</li><li>获取创建Bean的实例对象</li><li>执行销毁方法(context.close执行即完成销毁)</li></ul><p>注：这也是为什么要写set和get方法</p><p>O(∩_∩)O哈哈~不过IDEA快捷键（alt+insert一键生成set和get方法，我一次都没自己手写过）</p><h3 id="2、xml自动装配"><a href="#2、xml自动装配" class="headerlink" title="2、xml自动装配"></a>2、xml自动装配</h3><p>写一个测试的person类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>   <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>    <span class="token keyword">private</span>   <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span> <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCat</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> cat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cat <span class="token operator">=</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDog</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dog <span class="token operator">=</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"cat="</span> <span class="token operator">+</span> cat <span class="token operator">+</span>                <span class="token string">", dog="</span> <span class="token operator">+</span> dog <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-1、byName装配"><a href="#2-1、byName装配" class="headerlink" title="2.1、byName装配"></a>2.1、byName装配</h4><p>Bean的id值必须与类中变量名一致</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>自动装配<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Person<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kimihua<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>就是在bean中加一个autowire</p><h4 id="2-2、byType装配"><a href="#2-2、byType装配" class="headerlink" title="2.2、byType装配"></a>2.2、byType装配</h4><p>注：不能有相同类型的Bean</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Person<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kimihua<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="2-3、利用注解自动装配"><a href="#2-3、利用注解自动装配" class="headerlink" title="2.3、利用注解自动装配"></a>2.3、利用注解自动装配</h4><p>前提：在spring4之后，想要使用注解形式，必须得要引入aop的包，而且在配置文件当中，还得要引入一个context约束。</p><p>完整配置文件：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>好了，可以开始注解操作了||ヽ(<em>￣▽￣</em>)ノミ|Ю（事真多）</p><p>首先在xml文件中打开注解支持，如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>这个意思就是：扫描该目录下的所有包，这样加了注解之后就可以被发现。</p><p>完整的xml的文件呢：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>然后在测试person类中加上<code>@Autowired</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span>   <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span>   <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span> <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    public void setCat(Cat cat) &#123;</span><span class="token comment">//        this.cat = cat;</span><span class="token comment">//    &#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    public void setDog(Dog dog) &#123;</span><span class="token comment">//        this.dog = dog;</span><span class="token comment">//    &#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"cat="</span> <span class="token operator">+</span> cat <span class="token operator">+</span>                <span class="token string">", dog="</span> <span class="token operator">+</span> dog <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>小贴士：</p><p>利用注解的方式写，可以不用set方法。</p><p>^_(<em>^▽^</em>)好像挺方便的！！！</p><h4 id="2-4、其他注解"><a href="#2-4、其他注解" class="headerlink" title="2.4、其他注解"></a>2.4、其他注解</h4><h4 id="2-4-1、-Qualifier"><a href="#2-4-1、-Qualifier" class="headerlink" title="2.4.1、@Qualifier"></a>2.4.1、<code>@Qualifier</code></h4><p>按名称自动装配(byName){不能单独使用，需跟<a href="https://github.com/Autowired">@Autowired</a>()搭配使用}</p><p><a href="https://github.com/Autowired">@Autowired</a>()匹配多个类型的值时可使用<a href="https://github.com/Qualifier">@Qualifier</a>()取出其中一个</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> str<span class="token punctuation">;</span></code></pre><h4 id="2-4-2、-Resource"><a href="#2-4-2、-Resource" class="headerlink" title="2.4.2、@Resource"></a>2.4.2、<code>@Resource</code></h4><p>实现方式：先进行byName查找 失败；再进行byType查找</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果允许对象为null，设置required = false,默认为true</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cat2"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring对象创建与依赖注入</title>
      <link href="/2022/04/05/spring-dui-xiang-zhu-ru/"/>
      <url>/2022/04/05/spring-dui-xiang-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>首先创建一个Student实体类，它具有以下属性：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span>  <span class="token class-name">Address</span> address<span class="token punctuation">;</span><span class="token keyword">private</span>  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span><span class="token keyword">private</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hobbys<span class="token punctuation">;</span><span class="token keyword">private</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span>card<span class="token punctuation">;</span><span class="token keyword">private</span>  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span>games<span class="token punctuation">;</span><span class="token keyword">private</span>  <span class="token class-name">String</span> money<span class="token punctuation">;</span><span class="token keyword">private</span>  <span class="token class-name">Properties</span> info<span class="token punctuation">;</span></code></pre><p>下面利用SpringIOC实现：</p><h4 id="1-1、在bean中创建对象："><a href="#1-1、在bean中创建对象：" class="headerlink" title="1.1、在bean中创建对象："></a>1.1、在bean中创建对象：</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 各种属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="2、对于对象属性的依赖注入："><a href="#2、对于对象属性的依赖注入：" class="headerlink" title="2、对于对象属性的依赖注入："></a>2、对于对象属性的依赖注入：</h4><h5 id="2-1、普通值注入："><a href="#2-1、普通值注入：" class="headerlink" title="2.1、普通值注入："></a>2.1、普通值注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第一种普通值注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fatzard<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="2-2、利用bean注入："><a href="#2-2、利用bean注入：" class="headerlink" title="2.2、利用bean注入："></a>2.2、利用bean注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第二种bean注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adress<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="2-3、数组注入："><a href="#2-3、数组注入：" class="headerlink" title="2.3、数组注入："></a>2.3、数组注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--数组注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>追风筝的人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>那不勒斯的灯火<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-4、List注入："><a href="#2-4、List注入：" class="headerlink" title="2.4、List注入："></a>2.4、List注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbys<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>听歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>敲代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-5、map注入："><a href="#2-5、map注入：" class="headerlink" title="2.5、map注入："></a>2.5、map注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--map--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>122121212<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-6、set注入："><a href="#2-6、set注入：" class="headerlink" title="2.6、set注入："></a>2.6、set注入：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--set--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>GTA5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CSGO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-7、注入空值："><a href="#2-7、注入空值：" class="headerlink" title="2.7、注入空值："></a>2.7、注入空值：</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注入空值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="2-8、Properties的注入："><a href="#2-8、Properties的注入：" class="headerlink" title="2.8、Properties的注入："></a>2.8、Properties的注入：</h5><p>Properties可以存放很多东西，如下所示：<br><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--propertoes--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>202000001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></p><h4 id="3、利用p或c命名空间注入"><a href="#3、利用p或c命名空间注入" class="headerlink" title="3、利用p或c命名空间注入"></a>3、利用p或c命名空间注入</h4><p>在bean配置头部加上：</p><pre class="language-xml" data-language="xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"xmlns:c="http://www.springframework.org/schema/c"</code></pre><p>完整头部：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h4><p>使用ApplicationContext获取对应的bean</p><pre class="language-xml" data-language="xml"><code class="language-xml">ApplicationContext context =new ClassPathXmlApplicationContext("beans.xml");Student student=(Student)context.getBean("student");System.out.println(student.toString());</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC底层原理简析</title>
      <link href="/2022/04/04/spring-ioc/"/>
      <url>/2022/04/04/spring-ioc/</url>
      
        <content type="html"><![CDATA[<h3 id="1、什么是IOC？"><a href="#1、什么是IOC？" class="headerlink" title="1、什么是IOC？"></a>1、什么是IOC？</h3><h4 id="1-1、控制反转"><a href="#1-1、控制反转" class="headerlink" title="1.1、控制反转"></a>1.1、控制反转</h4><p> 控制反转的英文即Inversion of Control（IOC），换言之：就是一个bean容器，专业的说法叫做控制反转。它的作用就是在spring启动时会去将一个个bean放到这个容器当中。bean可以通过配置文件定义也可以通过注解定义。</p><h4 id="1-2、用图表示："><a href="#1-2、用图表示：" class="headerlink" title="1.2、用图表示："></a>1.2、用图表示：</h4><p><img src="/2022/04/04/spring-ioc/1.jpg" alt="IOC"></p><p>这张图感觉最生动地体现了IOC。</p><h3 id="2、Spring-IOC底层"><a href="#2、Spring-IOC底层" class="headerlink" title="2、Spring IOC底层"></a>2、Spring IOC底层</h3><h4 id="2-1、没有采用IOC之前："><a href="#2-1、没有采用IOC之前：" class="headerlink" title="2.1、没有采用IOC之前："></a>2.1、没有采用IOC之前：</h4><p>原始采用一个类方法中new另一个类的实例来进行调用违反了迪米特法则。当B类改变所有依赖它的类都需要改变！</p><p><img src="/2022/04/04/spring-ioc/2.jpg" alt="before"></p><h4 id="2-2、采用IOC"><a href="#2-2、采用IOC" class="headerlink" title="2.2、采用IOC"></a>2.2、采用IOC</h4><p>利用IOC这种工厂的思想</p><h4 id><a href="#" class="headerlink" title></a><img src="/2022/04/04/spring-ioc/3.jpg" alt="after"></h4><h4 id="2-3、IOC解耦"><a href="#2-3、IOC解耦" class="headerlink" title="2.3、IOC解耦"></a>2.3、IOC解耦</h4><p>采用工厂这种模式，再配置XML，从XML中取出配置好的bean对象。</p><p>第一步配置XML文件，配置创建的对象：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysqlImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.UserDaoMysqlImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>第二步在加载配置文件时候就进行对象的创建（常用）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> context<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而这个context就类似于工厂，接下来就可以取出对象就行：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">UserService</span> userService<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"mysqlImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从而可以调用对象的方法：</p><pre class="language-java" data-language="java"><code class="language-java">userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简而言之，Spring采用了这种工厂模式注入对象，而这也是Spring的核心之一！！！！</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个基于Spring的程序</title>
      <link href="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/"/>
      <url>/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是Spring？"><a href="#1、什么是Spring？" class="headerlink" title="1、什么是Spring？"></a>1、什么是Spring？</h2><p>Spring是轻量级开源的javaEE框架,其核心是AOP和IOC</p><h4 id="1-1、Spring的特点："><a href="#1-1、Spring的特点：" class="headerlink" title="1.1、Spring的特点："></a>1.1、Spring的特点：</h4><p>1.方便解耦，简化开发</p><p>2.AOP编程支持</p><p>3.方便程序测试</p><p>4.方便和其他框架进行整合    </p><p>5.方便事务操作</p><p>6.降低API开发难度</p><h4 id="1-2、Spring下载："><a href="#1-2、Spring下载：" class="headerlink" title="1.2、Spring下载："></a>1.2、Spring下载：</h4><p>进入网址：[<a href="http://repo.spring.io">http://repo.spring.io</a>]</p><p>详细的Spring下载可参考这篇博客<a href="https://blog.csdn.net/frankarmstrong/article/details/69808813">https://blog.csdn.net/frankarmstrong/article/details/69808813</a></p><h2 id="2、Spring-项目中pom-xml文件配置"><a href="#2、Spring-项目中pom-xml文件配置" class="headerlink" title="2、Spring 项目中pom.xml文件配置"></a>2、Spring 项目中pom.xml文件配置</h2><h4 id="2-1、导入依赖包："><a href="#2-1、导入依赖包：" class="headerlink" title="2.1、导入依赖包："></a>2.1、导入依赖包：</h4><p>Spring常用的的依赖包可以通过导入spring-webmvc包自动导入</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/1.png" alt></p><p>在xml文件中添加如下配置</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>导入依赖包，通过maven即可自动加载。</p><p>除此之外，还可以导入其他常用包</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/2.png" alt></p><p>这些包在后面的开发中会用到，其相关配置文件如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="3、利用Spring运行一个简单的程序"><a href="#3、利用Spring运行一个简单的程序" class="headerlink" title="3、利用Spring运行一个简单的程序"></a>3、利用Spring运行一个简单的程序</h3><p>打开IDEA编译器，构建如下的目录</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/3.png" alt="image-20220404185532186"></p><p>首先写一个实体<code>hello</code>类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> str<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello&#123;"</span> <span class="token operator">+</span>                <span class="token string">"str='"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>其中<code>./resources/bean.xml</code>为Spring的容器配置文件，那么接下来向Spring容器中注入对象：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.pro.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>在Spring中每个对象也被叫做bean，每个bean通过Spring容器赋值，比如：<code>&lt;property name=&quot;str&quot; value=&quot;Spring&quot;&gt;&lt;/property&gt;</code></p><p>如果对象注入成功，那么在hello类的左侧出现个Spring的标志</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/4.png" alt></p><p>看来我们注册成功，那么接下来写一次test类进行测试：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> mytest <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Hello</span> hello<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>其中<code>ApplicationContext context=new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code>是拿去Spring容器中对象的前提操作，因此在取得上下文后，再通过<code>context.getBean</code>方法传入<code>id</code>获得的对象，这样我们就拿到了对象。</p><p>运行一下：</p><p><img src="/2022/04/04/2022-04-04-di-yi-ge-ji-yu-spring-de-cheng-xu/5.png" alt></p><p>很高兴，运行成功！！！！</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码格式测试</title>
      <link href="/2022/04/04/dai-ma-ce-shi/"/>
      <url>/2022/04/04/dai-ma-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>首先测试java代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然后测试C++代码：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main()&#123;    cout&lt;&lt;&quot;C++&quot;&lt;&lt;endl;    return 0;&#125;</code></pre><p>最后是python代码：</p><pre class="language-py" data-language="py"><code class="language-py">print(&quot;python&quot;)</code></pre><p>完成</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2022/04/03/hello-world/"/>
      <url>/2022/04/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hello, my friends!</p><p>这是我的博客，我将在这分享我的算法笔记和Spring的学习之路！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
